diff --git a/node_modules/@wazo/sdk/lib/__tests__/api-client.test.js b/node_modules/@wazo/sdk/lib/__tests__/api-client.test.js
index 1c3f509..a6b699d 100644
--- a/node_modules/@wazo/sdk/lib/__tests__/api-client.test.js
+++ b/node_modules/@wazo/sdk/lib/__tests__/api-client.test.js
@@ -224,7 +224,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2745,7 +2745,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3002,6 +3002,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3021,6 +3028,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3032,12 +3040,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3045,13 +3054,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3124,7 +3134,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3271,7 +3281,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3438,8 +3448,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3545,7 +3555,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -3564,8 +3574,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
diff --git a/node_modules/@wazo/sdk/lib/__tests__/web-rtc-client.test.js b/node_modules/@wazo/sdk/lib/__tests__/web-rtc-client.test.js
index fe51cff..4bc99ca 100644
--- a/node_modules/@wazo/sdk/lib/__tests__/web-rtc-client.test.js
+++ b/node_modules/@wazo/sdk/lib/__tests__/web-rtc-client.test.js
@@ -509,7 +509,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -729,7 +729,7 @@ const parseCandidate = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -739,7 +739,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -753,14 +753,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -778,7 +778,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -788,7 +788,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -802,7 +802,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -840,7 +840,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -1263,7 +1263,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3325,7 +3325,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3582,6 +3582,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3601,6 +3608,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3612,12 +3620,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3625,13 +3634,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3704,7 +3714,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3851,7 +3861,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -4018,8 +4028,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -4125,7 +4135,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4144,8 +4154,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -7633,7 +7643,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
diff --git a/node_modules/@wazo/sdk/lib/api-client.js b/node_modules/@wazo/sdk/lib/api-client.js
index c6aa69c..748101d 100644
--- a/node_modules/@wazo/sdk/lib/api-client.js
+++ b/node_modules/@wazo/sdk/lib/api-client.js
@@ -224,7 +224,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2745,7 +2745,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3002,6 +3002,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3021,6 +3028,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3032,12 +3040,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3045,13 +3054,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3124,7 +3134,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3271,7 +3281,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3438,8 +3448,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3545,7 +3555,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -3564,8 +3574,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
diff --git a/node_modules/@wazo/sdk/lib/api/agentd.js b/node_modules/@wazo/sdk/lib/api/agentd.js
index e41bf17..22b3d5f 100644
--- a/node_modules/@wazo/sdk/lib/api/agentd.js
+++ b/node_modules/@wazo/sdk/lib/api/agentd.js
@@ -220,7 +220,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
diff --git a/node_modules/@wazo/sdk/lib/api/amid.js b/node_modules/@wazo/sdk/lib/api/amid.js
index d2f2af6..806a8a3 100644
--- a/node_modules/@wazo/sdk/lib/api/amid.js
+++ b/node_modules/@wazo/sdk/lib/api/amid.js
@@ -159,7 +159,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
diff --git a/node_modules/@wazo/sdk/lib/api/application.js b/node_modules/@wazo/sdk/lib/api/application.js
index eebbb7f..6001156 100644
--- a/node_modules/@wazo/sdk/lib/api/application.js
+++ b/node_modules/@wazo/sdk/lib/api/application.js
@@ -220,7 +220,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
diff --git a/node_modules/@wazo/sdk/lib/api/auth.js b/node_modules/@wazo/sdk/lib/api/auth.js
index 97412e9..7c92d3b 100644
--- a/node_modules/@wazo/sdk/lib/api/auth.js
+++ b/node_modules/@wazo/sdk/lib/api/auth.js
@@ -223,7 +223,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -1223,4 +1223,4 @@ var auth = (client              , baseUrl        ) => ({
 exports.BACKEND_LDAP_USER = BACKEND_LDAP_USER;
 exports.DEFAULT_BACKEND_USER = DEFAULT_BACKEND_USER;
 exports.DETAULT_EXPIRATION = DETAULT_EXPIRATION;
-exports.default = auth;
+exports["default"] = auth;
diff --git a/node_modules/@wazo/sdk/lib/api/call-logd.js b/node_modules/@wazo/sdk/lib/api/call-logd.js
index 5696afb..0005544 100644
--- a/node_modules/@wazo/sdk/lib/api/call-logd.js
+++ b/node_modules/@wazo/sdk/lib/api/call-logd.js
@@ -160,7 +160,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -465,8 +465,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -572,7 +572,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -591,8 +591,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
diff --git a/node_modules/@wazo/sdk/lib/api/calld.js b/node_modules/@wazo/sdk/lib/api/calld.js
index a36fa1d..50e3ed7 100644
--- a/node_modules/@wazo/sdk/lib/api/calld.js
+++ b/node_modules/@wazo/sdk/lib/api/calld.js
@@ -221,7 +221,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -775,6 +775,13 @@ var newFrom = (instance     , ToClass     ) => {
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -794,6 +801,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -805,12 +813,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -818,13 +827,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -897,7 +907,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -1044,7 +1054,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
diff --git a/node_modules/@wazo/sdk/lib/api/chatd.js b/node_modules/@wazo/sdk/lib/api/chatd.js
index 89ce56e..9cfb72d 100644
--- a/node_modules/@wazo/sdk/lib/api/chatd.js
+++ b/node_modules/@wazo/sdk/lib/api/chatd.js
@@ -220,7 +220,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -1169,6 +1169,13 @@ class ChatRoom {
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -1188,6 +1195,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -1199,12 +1207,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -1212,13 +1221,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
diff --git a/node_modules/@wazo/sdk/lib/api/confd.js b/node_modules/@wazo/sdk/lib/api/confd.js
index 95942f2..7a6c305 100644
--- a/node_modules/@wazo/sdk/lib/api/confd.js
+++ b/node_modules/@wazo/sdk/lib/api/confd.js
@@ -220,7 +220,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -1394,7 +1394,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
diff --git a/node_modules/@wazo/sdk/lib/api/ctid-ng.js b/node_modules/@wazo/sdk/lib/api/ctid-ng.js
index f22f320..85942c0 100644
--- a/node_modules/@wazo/sdk/lib/api/ctid-ng.js
+++ b/node_modules/@wazo/sdk/lib/api/ctid-ng.js
@@ -224,7 +224,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -778,6 +778,13 @@ var newFrom = (instance     , ToClass     ) => {
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -797,6 +804,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -808,12 +816,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -821,13 +830,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -900,7 +910,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -1047,7 +1057,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
diff --git a/node_modules/@wazo/sdk/lib/api/dird.js b/node_modules/@wazo/sdk/lib/api/dird.js
index d7903a5..9462120 100644
--- a/node_modules/@wazo/sdk/lib/api/dird.js
+++ b/node_modules/@wazo/sdk/lib/api/dird.js
@@ -222,7 +222,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
diff --git a/node_modules/@wazo/sdk/lib/api/webhookd.js b/node_modules/@wazo/sdk/lib/api/webhookd.js
index 252c586..2a54b2a 100644
--- a/node_modules/@wazo/sdk/lib/api/webhookd.js
+++ b/node_modules/@wazo/sdk/lib/api/webhookd.js
@@ -159,7 +159,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
diff --git a/node_modules/@wazo/sdk/lib/checker/Checker.js b/node_modules/@wazo/sdk/lib/checker/Checker.js
index f2dd257..3fc6ec6 100644
--- a/node_modules/@wazo/sdk/lib/checker/Checker.js
+++ b/node_modules/@wazo/sdk/lib/checker/Checker.js
@@ -246,7 +246,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2767,7 +2767,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3024,6 +3024,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3043,6 +3050,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3054,12 +3062,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3067,13 +3076,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3146,7 +3156,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3293,7 +3303,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3430,7 +3440,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3486,8 +3496,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3593,7 +3603,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -3612,8 +3622,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5295,7 +5305,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$2.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -5634,7 +5644,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -5644,7 +5654,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -5658,14 +5668,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -5683,7 +5693,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -5693,7 +5703,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -5707,7 +5717,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -5745,7 +5755,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -8221,7 +8231,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
diff --git a/node_modules/@wazo/sdk/lib/checker/checks/aor.js b/node_modules/@wazo/sdk/lib/checker/checks/aor.js
index 92d657d..634c618 100644
--- a/node_modules/@wazo/sdk/lib/checker/checks/aor.js
+++ b/node_modules/@wazo/sdk/lib/checker/checks/aor.js
@@ -224,7 +224,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2745,7 +2745,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3002,6 +3002,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3021,6 +3028,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3032,12 +3040,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3045,13 +3054,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3124,7 +3134,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3271,7 +3281,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3438,8 +3448,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3545,7 +3555,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -3564,8 +3574,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
diff --git a/node_modules/@wazo/sdk/lib/checker/checks/api.js b/node_modules/@wazo/sdk/lib/checker/checks/api.js
index 1ecb65e..758fbd7 100644
--- a/node_modules/@wazo/sdk/lib/checker/checks/api.js
+++ b/node_modules/@wazo/sdk/lib/checker/checks/api.js
@@ -224,7 +224,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2745,7 +2745,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3002,6 +3002,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3021,6 +3028,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3032,12 +3040,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3045,13 +3054,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3124,7 +3134,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3271,7 +3281,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3438,8 +3448,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3545,7 +3555,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -3564,8 +3574,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
diff --git a/node_modules/@wazo/sdk/lib/checker/checks/index.js b/node_modules/@wazo/sdk/lib/checker/checks/index.js
index b453c1f..225293b 100644
--- a/node_modules/@wazo/sdk/lib/checker/checks/index.js
+++ b/node_modules/@wazo/sdk/lib/checker/checks/index.js
@@ -246,7 +246,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2767,7 +2767,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3024,6 +3024,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3043,6 +3050,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3054,12 +3062,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3067,13 +3076,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3146,7 +3156,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3293,7 +3303,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3430,7 +3440,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3486,8 +3496,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3593,7 +3603,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -3612,8 +3622,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5295,7 +5305,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$1.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -5634,7 +5644,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -5644,7 +5654,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -5658,14 +5668,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -5683,7 +5693,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -5693,7 +5703,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -5707,7 +5717,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -5745,7 +5755,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -8221,7 +8231,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
diff --git a/node_modules/@wazo/sdk/lib/checker/checks/wazo-websocket.js b/node_modules/@wazo/sdk/lib/checker/checks/wazo-websocket.js
index ee8e0cc..a866376 100644
--- a/node_modules/@wazo/sdk/lib/checker/checks/wazo-websocket.js
+++ b/node_modules/@wazo/sdk/lib/checker/checks/wazo-websocket.js
@@ -17,7 +17,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -217,7 +217,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -675,7 +675,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
diff --git a/node_modules/@wazo/sdk/lib/checker/checks/webrtc-transport.js b/node_modules/@wazo/sdk/lib/checker/checks/webrtc-transport.js
index f5f3126..ec898a5 100644
--- a/node_modules/@wazo/sdk/lib/checker/checks/webrtc-transport.js
+++ b/node_modules/@wazo/sdk/lib/checker/checks/webrtc-transport.js
@@ -509,7 +509,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -729,7 +729,7 @@ const parseCandidate = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -739,7 +739,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -753,14 +753,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -778,7 +778,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -788,7 +788,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -802,7 +802,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -840,7 +840,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -1263,7 +1263,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3325,7 +3325,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3582,6 +3582,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3601,6 +3608,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3612,12 +3620,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3625,13 +3634,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3704,7 +3714,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3851,7 +3861,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -4018,8 +4028,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -4125,7 +4135,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4144,8 +4154,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -7633,7 +7643,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
diff --git a/node_modules/@wazo/sdk/lib/checker/checks/webrtc.js b/node_modules/@wazo/sdk/lib/checker/checks/webrtc.js
index c4e6e1e..a2f47f5 100644
--- a/node_modules/@wazo/sdk/lib/checker/checks/webrtc.js
+++ b/node_modules/@wazo/sdk/lib/checker/checks/webrtc.js
@@ -509,7 +509,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -729,7 +729,7 @@ const parseCandidate = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -739,7 +739,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -753,14 +753,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -778,7 +778,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -788,7 +788,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -802,7 +802,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -840,7 +840,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -1263,7 +1263,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3325,7 +3325,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3582,6 +3582,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3601,6 +3608,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3612,12 +3620,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3625,13 +3634,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3704,7 +3714,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3851,7 +3861,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -4018,8 +4028,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -4125,7 +4135,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4144,8 +4154,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -7633,7 +7643,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
diff --git a/node_modules/@wazo/sdk/lib/domain/AdHocAPIConference.js b/node_modules/@wazo/sdk/lib/domain/AdHocAPIConference.js
index 1c88bac..0cb7ac0 100644
--- a/node_modules/@wazo/sdk/lib/domain/AdHocAPIConference.js
+++ b/node_modules/@wazo/sdk/lib/domain/AdHocAPIConference.js
@@ -106,7 +106,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -450,7 +450,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2960,7 +2960,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3217,6 +3217,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3236,6 +3243,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3247,12 +3255,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3260,13 +3269,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3339,7 +3349,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3438,8 +3448,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3545,7 +3555,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -3564,8 +3574,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
diff --git a/node_modules/@wazo/sdk/lib/domain/Call.js b/node_modules/@wazo/sdk/lib/domain/Call.js
index f764658..70f7a03 100644
--- a/node_modules/@wazo/sdk/lib/domain/Call.js
+++ b/node_modules/@wazo/sdk/lib/domain/Call.js
@@ -101,7 +101,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
diff --git a/node_modules/@wazo/sdk/lib/domain/CallLog.js b/node_modules/@wazo/sdk/lib/domain/CallLog.js
index 0859473..7feb91e 100644
--- a/node_modules/@wazo/sdk/lib/domain/CallLog.js
+++ b/node_modules/@wazo/sdk/lib/domain/CallLog.js
@@ -70,8 +70,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -177,7 +177,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -196,8 +196,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
diff --git a/node_modules/@wazo/sdk/lib/domain/ChatMessage.js b/node_modules/@wazo/sdk/lib/domain/ChatMessage.js
index d07103c..6b365d0 100644
--- a/node_modules/@wazo/sdk/lib/domain/ChatMessage.js
+++ b/node_modules/@wazo/sdk/lib/domain/ChatMessage.js
@@ -38,6 +38,13 @@ var newFrom = (instance     , ToClass     ) => {
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -57,6 +64,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -68,12 +76,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -81,13 +90,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
diff --git a/node_modules/@wazo/sdk/lib/domain/Contact.js b/node_modules/@wazo/sdk/lib/domain/Contact.js
index 85cda67..c960014 100644
--- a/node_modules/@wazo/sdk/lib/domain/Contact.js
+++ b/node_modules/@wazo/sdk/lib/domain/Contact.js
@@ -748,4 +748,4 @@ class Contact {
 }
 
 exports.BACKEND = BACKEND;
-exports.default = Contact;
+exports["default"] = Contact;
diff --git a/node_modules/@wazo/sdk/lib/domain/Features.js b/node_modules/@wazo/sdk/lib/domain/Features.js
index d3a253f..a043e62 100644
--- a/node_modules/@wazo/sdk/lib/domain/Features.js
+++ b/node_modules/@wazo/sdk/lib/domain/Features.js
@@ -226,7 +226,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2747,7 +2747,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3004,6 +3004,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3023,6 +3030,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3034,12 +3042,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3047,13 +3056,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3126,7 +3136,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3273,7 +3283,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3440,8 +3450,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3547,7 +3557,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -3566,8 +3576,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5025,5 +5035,5 @@ class Features {
 var Features$1 = new Features();
 
 exports.FEATURES = FEATURES;
-exports.default = Features$1;
+exports["default"] = Features$1;
 exports.getScopeName = getScopeName;
diff --git a/node_modules/@wazo/sdk/lib/domain/ForwardOption.js b/node_modules/@wazo/sdk/lib/domain/ForwardOption.js
index d803a5b..6980aa6 100644
--- a/node_modules/@wazo/sdk/lib/domain/ForwardOption.js
+++ b/node_modules/@wazo/sdk/lib/domain/ForwardOption.js
@@ -73,4 +73,4 @@ class ForwardOption {
 }
 
 exports.FORWARD_KEYS = FORWARD_KEYS;
-exports.default = ForwardOption;
+exports["default"] = ForwardOption;
diff --git a/node_modules/@wazo/sdk/lib/domain/Meeting.js b/node_modules/@wazo/sdk/lib/domain/Meeting.js
index ff34155..c8df621 100644
--- a/node_modules/@wazo/sdk/lib/domain/Meeting.js
+++ b/node_modules/@wazo/sdk/lib/domain/Meeting.js
@@ -68,7 +68,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
diff --git a/node_modules/@wazo/sdk/lib/domain/MeetingAuthorization.js b/node_modules/@wazo/sdk/lib/domain/MeetingAuthorization.js
index 4e34e02..275c29f 100644
--- a/node_modules/@wazo/sdk/lib/domain/MeetingAuthorization.js
+++ b/node_modules/@wazo/sdk/lib/domain/MeetingAuthorization.js
@@ -76,4 +76,4 @@ exports.POST_PROCESSED_ERROR = POST_PROCESSED_ERROR;
 exports.POST_PROCESSED_SUCCESS = POST_PROCESSED_SUCCESS;
 exports.POST_PROCESSING = POST_PROCESSING;
 exports.REJECTED = REJECTED;
-exports.default = MeetingAuthorization;
+exports["default"] = MeetingAuthorization;
diff --git a/node_modules/@wazo/sdk/lib/domain/Phone/CTIPhone.js b/node_modules/@wazo/sdk/lib/domain/Phone/CTIPhone.js
index 7913194..af4ddfd 100644
--- a/node_modules/@wazo/sdk/lib/domain/Phone/CTIPhone.js
+++ b/node_modules/@wazo/sdk/lib/domain/Phone/CTIPhone.js
@@ -1592,7 +1592,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -2123,7 +2123,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -2179,8 +2179,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -2286,7 +2286,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -2305,8 +2305,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -2687,7 +2687,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -3714,7 +3714,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3928,6 +3928,13 @@ var confdMethods = (client              , baseUrl        ) => ({
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3947,6 +3954,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3958,12 +3966,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3971,13 +3980,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -4050,7 +4060,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -5788,4 +5798,4 @@ class CTIPhone extends Emitter                  {
 
 exports.TRANSFER_FLOW_ATTENDED = TRANSFER_FLOW_ATTENDED;
 exports.TRANSFER_FLOW_BLIND = TRANSFER_FLOW_BLIND;
-exports.default = CTIPhone;
+exports["default"] = CTIPhone;
diff --git a/node_modules/@wazo/sdk/lib/domain/Phone/WebRTCPhone.js b/node_modules/@wazo/sdk/lib/domain/Phone/WebRTCPhone.js
index dd955ef..857de94 100644
--- a/node_modules/@wazo/sdk/lib/domain/Phone/WebRTCPhone.js
+++ b/node_modules/@wazo/sdk/lib/domain/Phone/WebRTCPhone.js
@@ -633,7 +633,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -857,7 +857,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -2721,5 +2721,5 @@ exports.ON_UNREGISTERED = ON_UNREGISTERED;
 exports.ON_USER_AGENT = ON_USER_AGENT;
 exports.ON_VIDEO_INPUT_CHANGE = ON_VIDEO_INPUT_CHANGE;
 exports.ON_VIDEO_STREAM = ON_VIDEO_STREAM;
-exports.default = WebRTCPhone;
+exports["default"] = WebRTCPhone;
 exports.events = events;
diff --git a/node_modules/@wazo/sdk/lib/domain/Profile.js b/node_modules/@wazo/sdk/lib/domain/Profile.js
index b75231a..b4f3e72 100644
--- a/node_modules/@wazo/sdk/lib/domain/Profile.js
+++ b/node_modules/@wazo/sdk/lib/domain/Profile.js
@@ -411,4 +411,4 @@ class Profile {
 
 exports.LINE_STATE = LINE_STATE;
 exports.STATE = STATE;
-exports.default = Profile;
+exports["default"] = Profile;
diff --git a/node_modules/@wazo/sdk/lib/domain/Recording.js b/node_modules/@wazo/sdk/lib/domain/Recording.js
index 588d6b6..7dfdda1 100644
--- a/node_modules/@wazo/sdk/lib/domain/Recording.js
+++ b/node_modules/@wazo/sdk/lib/domain/Recording.js
@@ -42,8 +42,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
diff --git a/node_modules/@wazo/sdk/lib/domain/Voicemail.js b/node_modules/@wazo/sdk/lib/domain/Voicemail.js
index 8ed322e..42b4072 100644
--- a/node_modules/@wazo/sdk/lib/domain/Voicemail.js
+++ b/node_modules/@wazo/sdk/lib/domain/Voicemail.js
@@ -66,7 +66,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
diff --git a/node_modules/@wazo/sdk/lib/domain/__tests__/Call.test.js b/node_modules/@wazo/sdk/lib/domain/__tests__/Call.test.js
index eb3e87a..57254ec 100644
--- a/node_modules/@wazo/sdk/lib/domain/__tests__/Call.test.js
+++ b/node_modules/@wazo/sdk/lib/domain/__tests__/Call.test.js
@@ -101,7 +101,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
diff --git a/node_modules/@wazo/sdk/lib/domain/__tests__/CallLog.test.js b/node_modules/@wazo/sdk/lib/domain/__tests__/CallLog.test.js
index 0832dd9..032a7a6 100644
--- a/node_modules/@wazo/sdk/lib/domain/__tests__/CallLog.test.js
+++ b/node_modules/@wazo/sdk/lib/domain/__tests__/CallLog.test.js
@@ -70,8 +70,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -177,7 +177,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -196,8 +196,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -330,7 +330,7 @@ describe('CallLog domain', () => {
       filtered: 6,
       items: [
         {
-          answer: moment__default['default']('2017-08-07T13:51:18.892002+00:00').toDate(),
+          answer: moment__default["default"]('2017-08-07T13:51:18.892002+00:00').toDate(),
           answered: true,
           call_direction: 'outbound',
           source_extension: '8020',
@@ -363,7 +363,7 @@ describe('CallLog domain', () => {
 
     expect(logs).toEqual([
       new CallLog({
-        answer: moment__default['default']('2017-08-07T13:51:18.892002+00:00').toDate(),
+        answer: moment__default["default"]('2017-08-07T13:51:18.892002+00:00').toDate(),
         answered: true,
         callDirection: 'outbound',
         destination: {
@@ -378,14 +378,14 @@ describe('CallLog domain', () => {
         },
         id: 215,
         duration: 4000,
-        start: moment__default['default']('2017-08-06T13:50:55.819057+00:00').toDate(),
-        end: moment__default['default']('2017-08-08T13:51:23.822529+00:00').toDate(),
+        start: moment__default["default"]('2017-08-06T13:50:55.819057+00:00').toDate(),
+        end: moment__default["default"]('2017-08-08T13:51:23.822529+00:00').toDate(),
         recordings: [
           new Recording({
             deleted: false,
-            end: moment__default['default']('2021-08-11T13:22:50.519733+00:00').toDate(),
+            end: moment__default["default"]('2021-08-11T13:22:50.519733+00:00').toDate(),
             fileName: '2021-08-11T13_22_45UTC-61886-xxxx-5c72-4072-8503-e3ad9a41c0a0.wav',
-            start: moment__default['default']('2021-08-11T13:22:45.161954+00:00').toDate(),
+            start: moment__default["default"]('2021-08-11T13:22:45.161954+00:00').toDate(),
             uuid: '0394ad6f-5c72-4072-8503-e3ad9a41c0a0',
           }),
         ],
diff --git a/node_modules/@wazo/sdk/lib/domain/__tests__/Meeting.test.js b/node_modules/@wazo/sdk/lib/domain/__tests__/Meeting.test.js
index 733834b..63ef6f3 100644
--- a/node_modules/@wazo/sdk/lib/domain/__tests__/Meeting.test.js
+++ b/node_modules/@wazo/sdk/lib/domain/__tests__/Meeting.test.js
@@ -68,7 +68,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -158,7 +158,7 @@ describe('Meeting domain', () => {
     expect(extension).toEqual(args.exten);
     expect(persistent).toEqual(args.persistent);
     expect(ownerUuids).toEqual(args.owner_uuids);
-    expect(creationTime).toEqual(moment__default['default'](rawCreationTime).toDate());
+    expect(creationTime).toEqual(moment__default["default"](rawCreationTime).toDate());
     expect(requireAuthorization).toEqual(args.require_authorization);
   });
 
diff --git a/node_modules/@wazo/sdk/lib/domain/__tests__/Voicemail.test.js b/node_modules/@wazo/sdk/lib/domain/__tests__/Voicemail.test.js
index 7bbf33c..f15d5f5 100644
--- a/node_modules/@wazo/sdk/lib/domain/__tests__/Voicemail.test.js
+++ b/node_modules/@wazo/sdk/lib/domain/__tests__/Voicemail.test.js
@@ -66,7 +66,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
diff --git a/node_modules/@wazo/sdk/lib/index.js b/node_modules/@wazo/sdk/lib/index.js
index a7f518d..98ea280 100644
--- a/node_modules/@wazo/sdk/lib/index.js
+++ b/node_modules/@wazo/sdk/lib/index.js
@@ -249,7 +249,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2771,7 +2771,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3028,6 +3028,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3047,6 +3054,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3058,12 +3066,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3071,13 +3080,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3150,7 +3160,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3297,7 +3307,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3828,7 +3838,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3884,8 +3894,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3991,7 +4001,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4010,8 +4020,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5856,7 +5866,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -5866,7 +5876,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -5880,14 +5890,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -5905,7 +5915,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -5915,7 +5925,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -5929,7 +5939,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -5967,7 +5977,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -8541,7 +8551,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -8846,7 +8856,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$8.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -11934,8 +11944,8 @@ class Checker {
 
 //      
 
-const PhoneNumberUtil = LibPhoneNumber__default['default'].PhoneNumberUtil.getInstance();
-const { PhoneNumberFormat, AsYouTypeFormatter } = LibPhoneNumber__default['default'];
+const PhoneNumberUtil = LibPhoneNumber__default["default"].PhoneNumberUtil.getInstance();
+const { PhoneNumberFormat, AsYouTypeFormatter } = LibPhoneNumber__default["default"];
 
 // eslint-disable-next-line
 const EXTRA_CHAR_REGEXP = /[^+*\d]/g;
@@ -12052,7 +12062,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$5.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -12150,7 +12160,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -12320,7 +12330,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -12555,8 +12565,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -12689,7 +12699,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$4.error('Mute via API, error', e);
       });
     }
@@ -12697,7 +12707,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$4.error('Unmute via API, error', e);
       });
     }
@@ -12865,7 +12875,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -12874,7 +12884,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -12883,7 +12893,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -13445,19 +13455,19 @@ class Room extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -13490,30 +13500,30 @@ class Room extends Emitter {
     logger$1.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$1.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -13554,27 +13564,27 @@ class Room extends Emitter {
   static disconnect() {
     logger$1.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$1.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -13605,21 +13615,21 @@ class Room extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$1.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -13633,7 +13643,7 @@ class Room extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$1.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -13645,7 +13655,7 @@ class Room extends Emitter {
   turnCameraOff() {
     logger$1.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -13655,7 +13665,7 @@ class Room extends Emitter {
   turnCameraOn() {
     logger$1.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -13665,7 +13675,7 @@ class Room extends Emitter {
   mute() {
     logger$1.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -13673,7 +13683,7 @@ class Room extends Emitter {
   unmute() {
     logger$1.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -13693,7 +13703,7 @@ class Room extends Emitter {
   hold() {
     logger$1.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -13703,7 +13713,7 @@ class Room extends Emitter {
   async resume() {
     logger$1.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -13721,9 +13731,9 @@ class Room extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -13731,23 +13741,23 @@ class Room extends Emitter {
   sendDTMF(tone        ) {
     logger$1.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$1.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -13761,27 +13771,27 @@ class Room extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -13791,15 +13801,15 @@ class Room extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$1.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -13855,7 +13865,7 @@ class Room extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -13874,20 +13884,20 @@ class Room extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -13960,7 +13970,7 @@ class Room extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -13975,12 +13985,12 @@ class Room extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -14007,13 +14017,13 @@ class Room extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -14026,7 +14036,7 @@ class Room extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$1.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -14075,7 +14085,7 @@ class Room extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -14103,7 +14113,7 @@ class Room extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -14172,7 +14182,7 @@ class Room extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -14188,7 +14198,7 @@ class Room extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -14202,11 +14212,11 @@ class SipRoom extends Room {
     logger.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -14225,7 +14235,7 @@ class SipRoom extends Room {
   mute() {
     logger.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -14233,25 +14243,25 @@ class SipRoom extends Room {
   unmute() {
     logger.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -14290,7 +14300,7 @@ class SipRoom extends Room {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -14326,7 +14336,7 @@ class SipRoom extends Room {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -14350,7 +14360,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -14431,7 +14441,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -14908,6 +14918,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 //      
 
                                         
@@ -14968,7 +14980,7 @@ var index = {
   FORWARD_KEYS,
   LINE_STATE,
   SOCKET_EVENTS: SOCKET_EVENTS$1,
-  Wazo,
+  Wazo: Wazo$1,
   WebRTCPhone,
   Meeting,
 };
diff --git a/node_modules/@wazo/sdk/lib/lib/WazoSessionDescriptionHandler.js b/node_modules/@wazo/sdk/lib/lib/WazoSessionDescriptionHandler.js
index 3d061c1..af599eb 100644
--- a/node_modules/@wazo/sdk/lib/lib/WazoSessionDescriptionHandler.js
+++ b/node_modules/@wazo/sdk/lib/lib/WazoSessionDescriptionHandler.js
@@ -195,7 +195,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -415,7 +415,7 @@ const parseCandidate = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -425,7 +425,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -443,7 +443,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -453,7 +453,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -467,7 +467,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -505,7 +505,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -922,5 +922,5 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   }
 }
 
-exports.default = WazoSessionDescriptionHandler;
+exports["default"] = WazoSessionDescriptionHandler;
 exports.wazoMediaStreamFactory = wazoMediaStreamFactory;
diff --git a/node_modules/@wazo/sdk/lib/service/CallApi.js b/node_modules/@wazo/sdk/lib/service/CallApi.js
index ec4d120..07c286c 100644
--- a/node_modules/@wazo/sdk/lib/service/CallApi.js
+++ b/node_modules/@wazo/sdk/lib/service/CallApi.js
@@ -106,7 +106,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -1740,8 +1740,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -1847,7 +1847,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -1866,8 +1866,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -2264,7 +2264,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -3291,7 +3291,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3505,6 +3505,13 @@ var confdMethods = (client              , baseUrl        ) => ({
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3524,6 +3531,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3535,12 +3543,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3548,13 +3557,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3627,7 +3637,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
diff --git a/node_modules/@wazo/sdk/lib/service/IssueReporter.js b/node_modules/@wazo/sdk/lib/service/IssueReporter.js
index 29918b0..b710e43 100644
--- a/node_modules/@wazo/sdk/lib/service/IssueReporter.js
+++ b/node_modules/@wazo/sdk/lib/service/IssueReporter.js
@@ -187,7 +187,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
diff --git a/node_modules/@wazo/sdk/lib/service/__tests__/IssueReporter.test.js b/node_modules/@wazo/sdk/lib/service/__tests__/IssueReporter.test.js
index 89e5bd1..dc808a6 100644
--- a/node_modules/@wazo/sdk/lib/service/__tests__/IssueReporter.test.js
+++ b/node_modules/@wazo/sdk/lib/service/__tests__/IssueReporter.test.js
@@ -187,7 +187,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
diff --git a/node_modules/@wazo/sdk/lib/service/getApiClient.js b/node_modules/@wazo/sdk/lib/service/getApiClient.js
index 1a06b64..9916535 100644
--- a/node_modules/@wazo/sdk/lib/service/getApiClient.js
+++ b/node_modules/@wazo/sdk/lib/service/getApiClient.js
@@ -226,7 +226,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2747,7 +2747,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3004,6 +3004,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3023,6 +3030,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3034,12 +3042,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3047,13 +3056,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3126,7 +3136,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3273,7 +3283,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3440,8 +3450,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3547,7 +3557,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -3566,8 +3576,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5003,7 +5013,7 @@ var getApiClient = (forServer          = null)                => {
   return fillClient(global.wazoClients[server]);
 };
 
-exports.default = getApiClient;
+exports["default"] = getApiClient;
 exports.setApiClientId = setApiClientId;
 exports.setApiToken = setApiToken;
 exports.setCurrentServer = setCurrentServer;
diff --git a/node_modules/@wazo/sdk/lib/simple/Auth.js b/node_modules/@wazo/sdk/lib/simple/Auth.js
index 2a3ce37..1066c73 100644
--- a/node_modules/@wazo/sdk/lib/simple/Auth.js
+++ b/node_modules/@wazo/sdk/lib/simple/Auth.js
@@ -1743,7 +1743,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2771,7 +2771,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3028,6 +3028,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3047,6 +3054,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3058,12 +3066,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3071,13 +3080,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3150,7 +3160,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3297,7 +3307,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3828,7 +3838,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3884,8 +3894,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3991,7 +4001,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4010,8 +4020,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -6035,7 +6045,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6045,7 +6055,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6059,14 +6069,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6084,7 +6094,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6094,7 +6104,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6108,7 +6118,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6146,7 +6156,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -8720,7 +8730,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -10728,8 +10738,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -10862,7 +10872,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$7.error('Mute via API, error', e);
       });
     }
@@ -10870,7 +10880,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$7.error('Unmute via API, error', e);
       });
     }
@@ -11038,7 +11048,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -11047,7 +11057,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -11056,7 +11066,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -11245,7 +11255,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$6.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -12136,19 +12146,19 @@ class Room$1 extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -12181,30 +12191,30 @@ class Room$1 extends Emitter {
     logger$3.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$3.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room$1(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -12245,27 +12255,27 @@ class Room$1 extends Emitter {
   static disconnect() {
     logger$3.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$3.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -12296,21 +12306,21 @@ class Room$1 extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$3.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -12324,7 +12334,7 @@ class Room$1 extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$3.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -12336,7 +12346,7 @@ class Room$1 extends Emitter {
   turnCameraOff() {
     logger$3.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -12346,7 +12356,7 @@ class Room$1 extends Emitter {
   turnCameraOn() {
     logger$3.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -12356,7 +12366,7 @@ class Room$1 extends Emitter {
   mute() {
     logger$3.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -12364,7 +12374,7 @@ class Room$1 extends Emitter {
   unmute() {
     logger$3.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -12384,7 +12394,7 @@ class Room$1 extends Emitter {
   hold() {
     logger$3.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -12394,7 +12404,7 @@ class Room$1 extends Emitter {
   async resume() {
     logger$3.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -12412,9 +12422,9 @@ class Room$1 extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -12422,23 +12432,23 @@ class Room$1 extends Emitter {
   sendDTMF(tone        ) {
     logger$3.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$3.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -12452,27 +12462,27 @@ class Room$1 extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -12482,15 +12492,15 @@ class Room$1 extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$3.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -12546,7 +12556,7 @@ class Room$1 extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -12565,20 +12575,20 @@ class Room$1 extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -12651,7 +12661,7 @@ class Room$1 extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -12666,12 +12676,12 @@ class Room$1 extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -12698,13 +12708,13 @@ class Room$1 extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -12717,7 +12727,7 @@ class Room$1 extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$3.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -12766,7 +12776,7 @@ class Room$1 extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -12794,7 +12804,7 @@ class Room$1 extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -12863,7 +12873,7 @@ class Room$1 extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -12879,7 +12889,7 @@ class Room$1 extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -12893,11 +12903,11 @@ class SipRoom extends Room$1 {
     logger$2.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -12916,7 +12926,7 @@ class SipRoom extends Room$1 {
   mute() {
     logger$2.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -12924,25 +12934,25 @@ class SipRoom extends Room$1 {
   unmute() {
     logger$2.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -12981,7 +12991,7 @@ class SipRoom extends Room$1 {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -13017,7 +13027,7 @@ class SipRoom extends Room$1 {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -13041,7 +13051,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -13122,7 +13132,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -14440,6 +14450,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 //      
 
 class InvalidSubscription extends Error {}
@@ -14489,7 +14501,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -14587,7 +14599,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -14757,7 +14769,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -14775,4 +14787,4 @@ exports.InvalidAuthorization = InvalidAuthorization;
 exports.InvalidSubscription = InvalidSubscription;
 exports.NoDomainNameError = NoDomainNameError;
 exports.NoTenantIdError = NoTenantIdError;
-exports.default = Auth$1;
+exports["default"] = Auth$1;
diff --git a/node_modules/@wazo/sdk/lib/simple/Configuration.js b/node_modules/@wazo/sdk/lib/simple/Configuration.js
index ad8eb68..0e0180f 100644
--- a/node_modules/@wazo/sdk/lib/simple/Configuration.js
+++ b/node_modules/@wazo/sdk/lib/simple/Configuration.js
@@ -1741,7 +1741,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2769,7 +2769,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3026,6 +3026,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3045,6 +3052,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3056,12 +3064,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3069,13 +3078,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3148,7 +3158,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3295,7 +3305,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3826,7 +3836,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3882,8 +3892,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3989,7 +3999,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4008,8 +4018,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -6033,7 +6043,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6043,7 +6053,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6057,14 +6067,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6082,7 +6092,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6092,7 +6102,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6106,7 +6116,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6144,7 +6154,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -8718,7 +8728,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -10726,8 +10736,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -10860,7 +10870,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$7.error('Mute via API, error', e);
       });
     }
@@ -10868,7 +10878,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$7.error('Unmute via API, error', e);
       });
     }
@@ -11036,7 +11046,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -11045,7 +11055,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -11054,7 +11064,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -11243,7 +11253,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$6.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -12134,19 +12144,19 @@ class Room$1 extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -12179,30 +12189,30 @@ class Room$1 extends Emitter {
     logger$3.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$3.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room$1(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -12243,27 +12253,27 @@ class Room$1 extends Emitter {
   static disconnect() {
     logger$3.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$3.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -12294,21 +12304,21 @@ class Room$1 extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$3.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -12322,7 +12332,7 @@ class Room$1 extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$3.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -12334,7 +12344,7 @@ class Room$1 extends Emitter {
   turnCameraOff() {
     logger$3.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -12344,7 +12354,7 @@ class Room$1 extends Emitter {
   turnCameraOn() {
     logger$3.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -12354,7 +12364,7 @@ class Room$1 extends Emitter {
   mute() {
     logger$3.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -12362,7 +12372,7 @@ class Room$1 extends Emitter {
   unmute() {
     logger$3.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -12382,7 +12392,7 @@ class Room$1 extends Emitter {
   hold() {
     logger$3.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -12392,7 +12402,7 @@ class Room$1 extends Emitter {
   async resume() {
     logger$3.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -12410,9 +12420,9 @@ class Room$1 extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -12420,23 +12430,23 @@ class Room$1 extends Emitter {
   sendDTMF(tone        ) {
     logger$3.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$3.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -12450,27 +12460,27 @@ class Room$1 extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -12480,15 +12490,15 @@ class Room$1 extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$3.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -12544,7 +12554,7 @@ class Room$1 extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -12563,20 +12573,20 @@ class Room$1 extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -12649,7 +12659,7 @@ class Room$1 extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -12664,12 +12674,12 @@ class Room$1 extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -12696,13 +12706,13 @@ class Room$1 extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -12715,7 +12725,7 @@ class Room$1 extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$3.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -12764,7 +12774,7 @@ class Room$1 extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -12792,7 +12802,7 @@ class Room$1 extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -12861,7 +12871,7 @@ class Room$1 extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -12877,7 +12887,7 @@ class Room$1 extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -12891,11 +12901,11 @@ class SipRoom extends Room$1 {
     logger$2.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -12914,7 +12924,7 @@ class SipRoom extends Room$1 {
   mute() {
     logger$2.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -12922,25 +12932,25 @@ class SipRoom extends Room$1 {
   unmute() {
     logger$2.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -12979,7 +12989,7 @@ class SipRoom extends Room$1 {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -13015,7 +13025,7 @@ class SipRoom extends Room$1 {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -13039,7 +13049,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -13103,7 +13113,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -14421,6 +14431,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 //      
 
 class InvalidSubscription extends Error {}
@@ -14470,7 +14482,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -14568,7 +14580,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -14738,7 +14750,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
diff --git a/node_modules/@wazo/sdk/lib/simple/Directory.js b/node_modules/@wazo/sdk/lib/simple/Directory.js
index 5911395..16b1017 100644
--- a/node_modules/@wazo/sdk/lib/simple/Directory.js
+++ b/node_modules/@wazo/sdk/lib/simple/Directory.js
@@ -224,7 +224,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2745,7 +2745,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3002,6 +3002,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3021,6 +3028,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3032,12 +3040,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3045,13 +3054,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3124,7 +3134,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3271,7 +3281,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3438,8 +3448,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3545,7 +3555,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -3564,8 +3574,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
diff --git a/node_modules/@wazo/sdk/lib/simple/Phone.js b/node_modules/@wazo/sdk/lib/simple/Phone.js
index 3f823b3..b535a11 100644
--- a/node_modules/@wazo/sdk/lib/simple/Phone.js
+++ b/node_modules/@wazo/sdk/lib/simple/Phone.js
@@ -129,7 +129,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -867,7 +867,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -3378,7 +3378,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3635,6 +3635,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3654,6 +3661,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3665,12 +3673,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3678,13 +3687,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3757,7 +3767,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3826,7 +3836,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3882,8 +3892,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3989,7 +3999,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4008,8 +4018,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -6033,7 +6043,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6043,7 +6053,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6057,14 +6067,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6082,7 +6092,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6092,7 +6102,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6106,7 +6116,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6144,7 +6154,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -8718,7 +8728,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -10725,7 +10735,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$7.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -10823,7 +10833,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -10993,7 +11003,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -11156,7 +11166,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$6.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -12047,19 +12057,19 @@ class Room$1 extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -12092,30 +12102,30 @@ class Room$1 extends Emitter {
     logger$3.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$3.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room$1(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -12156,27 +12166,27 @@ class Room$1 extends Emitter {
   static disconnect() {
     logger$3.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$3.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -12207,21 +12217,21 @@ class Room$1 extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$3.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -12235,7 +12245,7 @@ class Room$1 extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$3.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -12247,7 +12257,7 @@ class Room$1 extends Emitter {
   turnCameraOff() {
     logger$3.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -12257,7 +12267,7 @@ class Room$1 extends Emitter {
   turnCameraOn() {
     logger$3.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -12267,7 +12277,7 @@ class Room$1 extends Emitter {
   mute() {
     logger$3.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -12275,7 +12285,7 @@ class Room$1 extends Emitter {
   unmute() {
     logger$3.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -12295,7 +12305,7 @@ class Room$1 extends Emitter {
   hold() {
     logger$3.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -12305,7 +12315,7 @@ class Room$1 extends Emitter {
   async resume() {
     logger$3.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -12323,9 +12333,9 @@ class Room$1 extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -12333,23 +12343,23 @@ class Room$1 extends Emitter {
   sendDTMF(tone        ) {
     logger$3.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$3.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -12363,27 +12373,27 @@ class Room$1 extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -12393,15 +12403,15 @@ class Room$1 extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$3.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -12457,7 +12467,7 @@ class Room$1 extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -12476,20 +12486,20 @@ class Room$1 extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -12562,7 +12572,7 @@ class Room$1 extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -12577,12 +12587,12 @@ class Room$1 extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -12609,13 +12619,13 @@ class Room$1 extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -12628,7 +12638,7 @@ class Room$1 extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$3.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -12677,7 +12687,7 @@ class Room$1 extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -12705,7 +12715,7 @@ class Room$1 extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -12774,7 +12784,7 @@ class Room$1 extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -12790,7 +12800,7 @@ class Room$1 extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -12804,11 +12814,11 @@ class SipRoom extends Room$1 {
     logger$2.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -12827,7 +12837,7 @@ class SipRoom extends Room$1 {
   mute() {
     logger$2.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -12835,25 +12845,25 @@ class SipRoom extends Room$1 {
   unmute() {
     logger$2.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -12892,7 +12902,7 @@ class SipRoom extends Room$1 {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -12928,7 +12938,7 @@ class SipRoom extends Room$1 {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -12952,7 +12962,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -13033,7 +13043,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -14359,6 +14369,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 //      
 
 const logger = IssueReporter$1.loggerFor('simple-phone');
@@ -14401,8 +14413,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -14535,7 +14547,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger.error('Mute via API, error', e);
       });
     }
@@ -14543,7 +14555,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger.error('Unmute via API, error', e);
       });
     }
@@ -14711,7 +14723,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -14720,7 +14732,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -14729,7 +14741,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
diff --git a/node_modules/@wazo/sdk/lib/simple/Websocket.js b/node_modules/@wazo/sdk/lib/simple/Websocket.js
index 8aae2fc..d9df43a 100644
--- a/node_modules/@wazo/sdk/lib/simple/Websocket.js
+++ b/node_modules/@wazo/sdk/lib/simple/Websocket.js
@@ -17,7 +17,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -217,7 +217,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -675,7 +675,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$1.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
diff --git a/node_modules/@wazo/sdk/lib/simple/index.js b/node_modules/@wazo/sdk/lib/simple/index.js
index 5b5d2ed..31a8b8c 100644
--- a/node_modules/@wazo/sdk/lib/simple/index.js
+++ b/node_modules/@wazo/sdk/lib/simple/index.js
@@ -1741,7 +1741,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2769,7 +2769,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3026,6 +3026,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3045,6 +3052,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3056,12 +3064,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3069,13 +3078,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3148,7 +3158,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3295,7 +3305,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3826,7 +3836,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3882,8 +3892,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3989,7 +3999,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4008,8 +4018,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5897,7 +5907,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$9.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -5995,7 +6005,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -6165,7 +6175,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -6364,7 +6374,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6374,7 +6384,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6388,14 +6398,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6413,7 +6423,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6423,7 +6433,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6437,7 +6447,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6475,7 +6485,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -9049,7 +9059,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -11057,8 +11067,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -11191,7 +11201,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$6.error('Mute via API, error', e);
       });
     }
@@ -11199,7 +11209,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$6.error('Unmute via API, error', e);
       });
     }
@@ -11367,7 +11377,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -11376,7 +11386,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -11385,7 +11395,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -11574,7 +11584,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$5.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -12465,19 +12475,19 @@ class Room$1 extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -12510,30 +12520,30 @@ class Room$1 extends Emitter {
     logger$2.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$2.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room$1(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -12574,27 +12584,27 @@ class Room$1 extends Emitter {
   static disconnect() {
     logger$2.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$2.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -12625,21 +12635,21 @@ class Room$1 extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$2.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -12653,7 +12663,7 @@ class Room$1 extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$2.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -12665,7 +12675,7 @@ class Room$1 extends Emitter {
   turnCameraOff() {
     logger$2.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -12675,7 +12685,7 @@ class Room$1 extends Emitter {
   turnCameraOn() {
     logger$2.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -12685,7 +12695,7 @@ class Room$1 extends Emitter {
   mute() {
     logger$2.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -12693,7 +12703,7 @@ class Room$1 extends Emitter {
   unmute() {
     logger$2.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -12713,7 +12723,7 @@ class Room$1 extends Emitter {
   hold() {
     logger$2.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -12723,7 +12733,7 @@ class Room$1 extends Emitter {
   async resume() {
     logger$2.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -12741,9 +12751,9 @@ class Room$1 extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -12751,23 +12761,23 @@ class Room$1 extends Emitter {
   sendDTMF(tone        ) {
     logger$2.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$2.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -12781,27 +12791,27 @@ class Room$1 extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -12811,15 +12821,15 @@ class Room$1 extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$2.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -12875,7 +12885,7 @@ class Room$1 extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -12894,20 +12904,20 @@ class Room$1 extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -12980,7 +12990,7 @@ class Room$1 extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -12995,12 +13005,12 @@ class Room$1 extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -13027,13 +13037,13 @@ class Room$1 extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -13046,7 +13056,7 @@ class Room$1 extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$2.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -13095,7 +13105,7 @@ class Room$1 extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -13123,7 +13133,7 @@ class Room$1 extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -13192,7 +13202,7 @@ class Room$1 extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -13208,7 +13218,7 @@ class Room$1 extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -13222,11 +13232,11 @@ class SipRoom extends Room$1 {
     logger$1.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -13245,7 +13255,7 @@ class SipRoom extends Room$1 {
   mute() {
     logger$1.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -13253,25 +13263,25 @@ class SipRoom extends Room$1 {
   unmute() {
     logger$1.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -13310,7 +13320,7 @@ class SipRoom extends Room$1 {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -13346,7 +13356,7 @@ class SipRoom extends Room$1 {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -13370,7 +13380,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -13451,7 +13461,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -14769,4 +14779,6 @@ if (global) {
   global.Wazo = Wazo;
 }
 
-module.exports = Wazo;
+var Wazo$1 = Wazo;
+
+module.exports = Wazo$1;
diff --git a/node_modules/@wazo/sdk/lib/simple/room/LocalParticipant.js b/node_modules/@wazo/sdk/lib/simple/room/LocalParticipant.js
index eb1adeb..e26aa46 100644
--- a/node_modules/@wazo/sdk/lib/simple/room/LocalParticipant.js
+++ b/node_modules/@wazo/sdk/lib/simple/room/LocalParticipant.js
@@ -40,7 +40,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -538,7 +538,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -847,7 +847,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3404,7 +3404,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3661,6 +3661,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3680,6 +3687,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3691,12 +3699,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3704,13 +3713,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3783,7 +3793,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3882,8 +3892,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3989,7 +3999,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4008,8 +4018,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -6033,7 +6043,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6043,7 +6053,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6057,14 +6067,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6082,7 +6092,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6092,7 +6102,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6106,7 +6116,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6144,7 +6154,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -8718,7 +8728,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -10725,7 +10735,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$7.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -10823,7 +10833,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -10993,7 +11003,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -11156,7 +11166,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$6.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -11708,19 +11718,19 @@ class Room$1 extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -11753,30 +11763,30 @@ class Room$1 extends Emitter {
     logger$4.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$4.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room$1(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -11817,27 +11827,27 @@ class Room$1 extends Emitter {
   static disconnect() {
     logger$4.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$4.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -11868,21 +11878,21 @@ class Room$1 extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$4.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -11896,7 +11906,7 @@ class Room$1 extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$4.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -11908,7 +11918,7 @@ class Room$1 extends Emitter {
   turnCameraOff() {
     logger$4.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -11918,7 +11928,7 @@ class Room$1 extends Emitter {
   turnCameraOn() {
     logger$4.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -11928,7 +11938,7 @@ class Room$1 extends Emitter {
   mute() {
     logger$4.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -11936,7 +11946,7 @@ class Room$1 extends Emitter {
   unmute() {
     logger$4.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -11956,7 +11966,7 @@ class Room$1 extends Emitter {
   hold() {
     logger$4.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -11966,7 +11976,7 @@ class Room$1 extends Emitter {
   async resume() {
     logger$4.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -11984,9 +11994,9 @@ class Room$1 extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -11994,23 +12004,23 @@ class Room$1 extends Emitter {
   sendDTMF(tone        ) {
     logger$4.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$4.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -12024,27 +12034,27 @@ class Room$1 extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -12054,15 +12064,15 @@ class Room$1 extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$4.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -12118,7 +12128,7 @@ class Room$1 extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -12137,20 +12147,20 @@ class Room$1 extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -12223,7 +12233,7 @@ class Room$1 extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -12238,12 +12248,12 @@ class Room$1 extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -12270,13 +12280,13 @@ class Room$1 extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -12289,7 +12299,7 @@ class Room$1 extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$4.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -12338,7 +12348,7 @@ class Room$1 extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -12366,7 +12376,7 @@ class Room$1 extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -12435,7 +12445,7 @@ class Room$1 extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -12451,7 +12461,7 @@ class Room$1 extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -12465,11 +12475,11 @@ class SipRoom extends Room$1 {
     logger$3.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -12488,7 +12498,7 @@ class SipRoom extends Room$1 {
   mute() {
     logger$3.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -12496,25 +12506,25 @@ class SipRoom extends Room$1 {
   unmute() {
     logger$3.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -12553,7 +12563,7 @@ class SipRoom extends Room$1 {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -12589,7 +12599,7 @@ class SipRoom extends Room$1 {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -12613,7 +12623,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -12694,7 +12704,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -13952,7 +13962,7 @@ const Wazo = {
   Room: Room$1,
   SipRoom,
   RemoteParticipant,
-  LocalParticipant,
+  LocalParticipant: LocalParticipant$1,
   Stream,
   createLocalVideoStream,
   createLocalAudioStream,
@@ -14020,6 +14030,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 //      
 
 const logger$1 = IssueReporter$1.loggerFor('simple-phone');
@@ -14062,8 +14074,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -14196,7 +14208,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$1.error('Mute via API, error', e);
       });
     }
@@ -14204,7 +14216,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$1.error('Unmute via API, error', e);
       });
     }
@@ -14372,7 +14384,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -14381,7 +14393,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -14390,7 +14402,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -14769,4 +14781,6 @@ class Participant extends Emitter {
 class LocalParticipant extends Participant {
 }
 
-module.exports = LocalParticipant;
+var LocalParticipant$1 = LocalParticipant;
+
+module.exports = LocalParticipant$1;
diff --git a/node_modules/@wazo/sdk/lib/simple/room/Participant.js b/node_modules/@wazo/sdk/lib/simple/room/Participant.js
index 9067d5f..e86e491 100644
--- a/node_modules/@wazo/sdk/lib/simple/room/Participant.js
+++ b/node_modules/@wazo/sdk/lib/simple/room/Participant.js
@@ -40,7 +40,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -538,7 +538,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -847,7 +847,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3404,7 +3404,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3661,6 +3661,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3680,6 +3687,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3691,12 +3699,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3704,13 +3713,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3783,7 +3793,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3882,8 +3892,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3989,7 +3999,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4008,8 +4018,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -6033,7 +6043,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6043,7 +6053,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6057,14 +6067,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6082,7 +6092,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6092,7 +6102,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6106,7 +6116,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6144,7 +6154,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -8718,7 +8728,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -10725,7 +10735,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$7.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -10823,7 +10833,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -10993,7 +11003,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -11156,7 +11166,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$6.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -11713,19 +11723,19 @@ class Room$1 extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -11758,30 +11768,30 @@ class Room$1 extends Emitter {
     logger$4.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$4.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room$1(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -11822,27 +11832,27 @@ class Room$1 extends Emitter {
   static disconnect() {
     logger$4.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$4.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -11873,21 +11883,21 @@ class Room$1 extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$4.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -11901,7 +11911,7 @@ class Room$1 extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$4.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -11913,7 +11923,7 @@ class Room$1 extends Emitter {
   turnCameraOff() {
     logger$4.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -11923,7 +11933,7 @@ class Room$1 extends Emitter {
   turnCameraOn() {
     logger$4.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -11933,7 +11943,7 @@ class Room$1 extends Emitter {
   mute() {
     logger$4.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -11941,7 +11951,7 @@ class Room$1 extends Emitter {
   unmute() {
     logger$4.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -11961,7 +11971,7 @@ class Room$1 extends Emitter {
   hold() {
     logger$4.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -11971,7 +11981,7 @@ class Room$1 extends Emitter {
   async resume() {
     logger$4.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -11989,9 +11999,9 @@ class Room$1 extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -11999,23 +12009,23 @@ class Room$1 extends Emitter {
   sendDTMF(tone        ) {
     logger$4.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$4.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -12029,27 +12039,27 @@ class Room$1 extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -12059,15 +12069,15 @@ class Room$1 extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$4.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -12123,7 +12133,7 @@ class Room$1 extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -12142,20 +12152,20 @@ class Room$1 extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -12228,7 +12238,7 @@ class Room$1 extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -12243,12 +12253,12 @@ class Room$1 extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -12275,13 +12285,13 @@ class Room$1 extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -12294,7 +12304,7 @@ class Room$1 extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$4.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -12343,7 +12353,7 @@ class Room$1 extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -12371,7 +12381,7 @@ class Room$1 extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -12440,7 +12450,7 @@ class Room$1 extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -12456,7 +12466,7 @@ class Room$1 extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -12470,11 +12480,11 @@ class SipRoom extends Room$1 {
     logger$3.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -12493,7 +12503,7 @@ class SipRoom extends Room$1 {
   mute() {
     logger$3.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -12501,25 +12511,25 @@ class SipRoom extends Room$1 {
   unmute() {
     logger$3.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -12558,7 +12568,7 @@ class SipRoom extends Room$1 {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -12594,7 +12604,7 @@ class SipRoom extends Room$1 {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -12618,7 +12628,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -12699,7 +12709,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -14025,6 +14035,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 //      
 
 const logger$1 = IssueReporter$1.loggerFor('simple-phone');
@@ -14067,8 +14079,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -14201,7 +14213,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$1.error('Mute via API, error', e);
       });
     }
@@ -14209,7 +14221,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$1.error('Unmute via API, error', e);
       });
     }
@@ -14377,7 +14389,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -14386,7 +14398,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -14395,7 +14407,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
diff --git a/node_modules/@wazo/sdk/lib/simple/room/RemoteParticipant.js b/node_modules/@wazo/sdk/lib/simple/room/RemoteParticipant.js
index b8db110..87944c1 100644
--- a/node_modules/@wazo/sdk/lib/simple/room/RemoteParticipant.js
+++ b/node_modules/@wazo/sdk/lib/simple/room/RemoteParticipant.js
@@ -247,7 +247,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2769,7 +2769,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3026,6 +3026,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3045,6 +3052,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3056,12 +3064,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3069,13 +3078,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3148,7 +3158,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3295,7 +3305,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3826,7 +3836,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3882,8 +3892,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3989,7 +3999,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4008,8 +4018,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5897,7 +5907,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$9.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -5995,7 +6005,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -6165,7 +6175,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -6364,7 +6374,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6374,7 +6384,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6388,14 +6398,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6413,7 +6423,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6423,7 +6433,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6437,7 +6447,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6475,7 +6485,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -9049,7 +9059,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -11057,8 +11067,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -11191,7 +11201,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$6.error('Mute via API, error', e);
       });
     }
@@ -11199,7 +11209,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$6.error('Unmute via API, error', e);
       });
     }
@@ -11367,7 +11377,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -11376,7 +11386,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -11385,7 +11395,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -11574,7 +11584,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$5.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -12030,17 +12040,17 @@ var Websocket$1 = global.wazoWebsocketInstance;
 
 const logger$3 = IssueReporter$1.loggerFor('sdk-sip-room');
 
-class SipRoom extends Room {
+class SipRoom extends Room$1 {
 
   static async connect({ extension, constraints, audioOnly = false, extra, room }        ) {
     logger$3.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -12059,7 +12069,7 @@ class SipRoom extends Room {
   mute() {
     logger$3.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -12067,25 +12077,25 @@ class SipRoom extends Room {
   unmute() {
     logger$3.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -12124,7 +12134,7 @@ class SipRoom extends Room {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -12160,7 +12170,7 @@ class SipRoom extends Room {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -12523,7 +12533,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -12604,7 +12614,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -12688,7 +12698,7 @@ class NotificationOptions {
   
 
 // Represents a conference room, like `9000`.
-class Room$1 {
+class Room$2 {
              
 
                                   
@@ -12709,7 +12719,7 @@ class Room$1 {
   }
 
   connect(callSession             )       {
-    return new Room$1({ ...this, connectedCallSession: callSession });
+    return new Room$2({ ...this, connectedCallSession: callSession });
   }
 
   has(callSession             )          {
@@ -12718,7 +12728,7 @@ class Room$1 {
 
   addParticipant(uuid        , extension        , talking           = null) {
     if (!this.participants.some(participant => participant.uuid === uuid || participant.extension === extension)) {
-      return new Room$1({ ...this, participants: [...this.participants, { uuid, extension, talking }] });
+      return new Room$2({ ...this, participants: [...this.participants, { uuid, extension, talking }] });
     }
 
     return this;
@@ -12737,7 +12747,7 @@ class Room$1 {
       updatedParticipants.push(participant);
     }
 
-    return new Room$1({ ...this, participants: updatedParticipants });
+    return new Room$2({ ...this, participants: updatedParticipants });
   }
 
   updateParticipantByExtension(extension        , participant        , shouldAdd          = false) {
@@ -12753,7 +12763,7 @@ class Room$1 {
       updatedParticipants.push(participant);
     }
 
-    return new Room$1({ ...this, participants: updatedParticipants });
+    return new Room$2({ ...this, participants: updatedParticipants });
   }
 
   hasCallWithId(id        )          {
@@ -12761,18 +12771,18 @@ class Room$1 {
   }
 
   disconnect()       {
-    return new Room$1({ ...this, connectedCallSession: null });
+    return new Room$2({ ...this, connectedCallSession: null });
   }
 
   removeParticipantWithUUID(uuid        ) {
-    return new Room$1({
+    return new Room$2({
       ...this,
       participants: this.participants.filter(participant => participant.uuid !== uuid),
     });
   }
 
   removeParticipantWithExtension(extension        ) {
-    return new Room$1({
+    return new Room$2({
       ...this,
       participants: this.participants.filter(participant => participant.extension !== extension),
     });
@@ -12783,7 +12793,7 @@ class Room$1 {
   }
 
   static newFrom(room      ) {
-    return newFrom(room, Room$1);
+    return newFrom(room, Room$2);
   }
 }
 
@@ -13851,9 +13861,9 @@ const Wazo = {
   Auth: Auth$1,
   Phone: Phone$1,
   Websocket: Websocket$1,
-  Room,
+  Room: Room$1,
   SipRoom,
-  RemoteParticipant,
+  RemoteParticipant: RemoteParticipant$1,
   LocalParticipant,
   Stream,
   createLocalVideoStream,
@@ -13885,7 +13895,7 @@ const Wazo = {
     Session,
     Voicemail,
     Relocation,
-    ConferenceRoom: Room$1,
+    ConferenceRoom: Room$2,
     CallSession,
     IndirectTransfer,
     SwitchboardCall,
@@ -13922,6 +13932,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 //      
 
 const SIGNAL_TYPE_PARTICIPANT_UPDATE = 'signal/PARTICIPANT_UPDATE';
@@ -14011,19 +14023,19 @@ class Room extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -14056,30 +14068,30 @@ class Room extends Emitter {
     logger.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -14120,27 +14132,27 @@ class Room extends Emitter {
   static disconnect() {
     logger.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -14171,21 +14183,21 @@ class Room extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -14199,7 +14211,7 @@ class Room extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -14211,7 +14223,7 @@ class Room extends Emitter {
   turnCameraOff() {
     logger.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -14221,7 +14233,7 @@ class Room extends Emitter {
   turnCameraOn() {
     logger.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -14231,7 +14243,7 @@ class Room extends Emitter {
   mute() {
     logger.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -14239,7 +14251,7 @@ class Room extends Emitter {
   unmute() {
     logger.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -14259,7 +14271,7 @@ class Room extends Emitter {
   hold() {
     logger.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -14269,7 +14281,7 @@ class Room extends Emitter {
   async resume() {
     logger.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -14287,9 +14299,9 @@ class Room extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -14297,23 +14309,23 @@ class Room extends Emitter {
   sendDTMF(tone        ) {
     logger.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -14327,27 +14339,27 @@ class Room extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -14357,15 +14369,15 @@ class Room extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -14421,7 +14433,7 @@ class Room extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -14440,20 +14452,20 @@ class Room extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -14526,7 +14538,7 @@ class Room extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -14541,12 +14553,12 @@ class Room extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -14573,13 +14585,13 @@ class Room extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -14592,7 +14604,7 @@ class Room extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -14629,7 +14641,7 @@ class Room extends Emitter {
   _isParticipantJoining(participant             ) {
     this.__associateStreams(participant);
     // @VALIDATE: no need to publicize ourselves, no?
-    if (participant instanceof RemoteParticipant) {
+    if (participant instanceof RemoteParticipant$1) {
       this.eventEmitter.emit(this.CONFERENCE_USER_PARTICIPANT_JOINED, participant);
     }
   }
@@ -14641,7 +14653,7 @@ class Room extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -14669,7 +14681,7 @@ class Room extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -14738,7 +14750,7 @@ class Room extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -14754,10 +14766,12 @@ class Room extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
+var Room$1 = Room;
+
 //      
 
 class RemoteParticipant extends Participant {
@@ -14769,4 +14783,6 @@ class RemoteParticipant extends Participant {
   }
 }
 
-module.exports = RemoteParticipant;
+var RemoteParticipant$1 = RemoteParticipant;
+
+module.exports = RemoteParticipant$1;
diff --git a/node_modules/@wazo/sdk/lib/simple/room/Room.js b/node_modules/@wazo/sdk/lib/simple/room/Room.js
index 3ff7a4e..ab2b8bc 100644
--- a/node_modules/@wazo/sdk/lib/simple/room/Room.js
+++ b/node_modules/@wazo/sdk/lib/simple/room/Room.js
@@ -249,7 +249,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2771,7 +2771,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3028,6 +3028,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3047,6 +3054,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3058,12 +3066,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3071,13 +3080,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3150,7 +3160,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3297,7 +3307,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3828,7 +3838,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3884,8 +3894,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3991,7 +4001,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4010,8 +4020,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5899,7 +5909,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$9.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -5997,7 +6007,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -6167,7 +6177,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -6366,7 +6376,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6376,7 +6386,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6390,14 +6400,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6415,7 +6425,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6425,7 +6435,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6439,7 +6449,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6477,7 +6487,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -9051,7 +9061,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -11059,8 +11069,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -11193,7 +11203,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$6.error('Mute via API, error', e);
       });
     }
@@ -11201,7 +11211,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$6.error('Unmute via API, error', e);
       });
     }
@@ -11369,7 +11379,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -11378,7 +11388,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -11387,7 +11397,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -11576,7 +11586,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$5.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -12032,17 +12042,17 @@ var Websocket$1 = global.wazoWebsocketInstance;
 
 const logger$3 = IssueReporter$1.loggerFor('sdk-sip-room');
 
-class SipRoom extends Room {
+class SipRoom extends Room$1 {
 
   static async connect({ extension, constraints, audioOnly = false, extra, room }        ) {
     logger$3.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -12061,7 +12071,7 @@ class SipRoom extends Room {
   mute() {
     logger$3.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -12069,25 +12079,25 @@ class SipRoom extends Room {
   unmute() {
     logger$3.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -12126,7 +12136,7 @@ class SipRoom extends Room {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -12162,7 +12172,7 @@ class SipRoom extends Room {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -12536,7 +12546,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -12617,7 +12627,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -12701,7 +12711,7 @@ class NotificationOptions {
   
 
 // Represents a conference room, like `9000`.
-class Room$1 {
+class Room$2 {
              
 
                                   
@@ -12722,7 +12732,7 @@ class Room$1 {
   }
 
   connect(callSession             )       {
-    return new Room$1({ ...this, connectedCallSession: callSession });
+    return new Room$2({ ...this, connectedCallSession: callSession });
   }
 
   has(callSession             )          {
@@ -12731,7 +12741,7 @@ class Room$1 {
 
   addParticipant(uuid        , extension        , talking           = null) {
     if (!this.participants.some(participant => participant.uuid === uuid || participant.extension === extension)) {
-      return new Room$1({ ...this, participants: [...this.participants, { uuid, extension, talking }] });
+      return new Room$2({ ...this, participants: [...this.participants, { uuid, extension, talking }] });
     }
 
     return this;
@@ -12750,7 +12760,7 @@ class Room$1 {
       updatedParticipants.push(participant);
     }
 
-    return new Room$1({ ...this, participants: updatedParticipants });
+    return new Room$2({ ...this, participants: updatedParticipants });
   }
 
   updateParticipantByExtension(extension        , participant        , shouldAdd          = false) {
@@ -12766,7 +12776,7 @@ class Room$1 {
       updatedParticipants.push(participant);
     }
 
-    return new Room$1({ ...this, participants: updatedParticipants });
+    return new Room$2({ ...this, participants: updatedParticipants });
   }
 
   hasCallWithId(id        )          {
@@ -12774,18 +12784,18 @@ class Room$1 {
   }
 
   disconnect()       {
-    return new Room$1({ ...this, connectedCallSession: null });
+    return new Room$2({ ...this, connectedCallSession: null });
   }
 
   removeParticipantWithUUID(uuid        ) {
-    return new Room$1({
+    return new Room$2({
       ...this,
       participants: this.participants.filter(participant => participant.uuid !== uuid),
     });
   }
 
   removeParticipantWithExtension(extension        ) {
-    return new Room$1({
+    return new Room$2({
       ...this,
       participants: this.participants.filter(participant => participant.extension !== extension),
     });
@@ -12796,7 +12806,7 @@ class Room$1 {
   }
 
   static newFrom(room      ) {
-    return newFrom(room, Room$1);
+    return newFrom(room, Room$2);
   }
 }
 
@@ -13864,7 +13874,7 @@ const Wazo = {
   Auth: Auth$1,
   Phone: Phone$1,
   Websocket: Websocket$1,
-  Room,
+  Room: Room$1,
   SipRoom,
   RemoteParticipant,
   LocalParticipant,
@@ -13898,7 +13908,7 @@ const Wazo = {
     Session,
     Voicemail,
     Relocation,
-    ConferenceRoom: Room$1,
+    ConferenceRoom: Room$2,
     CallSession,
     IndirectTransfer,
     SwitchboardCall,
@@ -13935,6 +13945,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 //      
 
 const SIGNAL_TYPE_PARTICIPANT_UPDATE = 'signal/PARTICIPANT_UPDATE';
@@ -14024,19 +14036,19 @@ class Room extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -14069,30 +14081,30 @@ class Room extends Emitter {
     logger.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -14133,27 +14145,27 @@ class Room extends Emitter {
   static disconnect() {
     logger.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -14184,21 +14196,21 @@ class Room extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -14212,7 +14224,7 @@ class Room extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -14224,7 +14236,7 @@ class Room extends Emitter {
   turnCameraOff() {
     logger.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -14234,7 +14246,7 @@ class Room extends Emitter {
   turnCameraOn() {
     logger.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -14244,7 +14256,7 @@ class Room extends Emitter {
   mute() {
     logger.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -14252,7 +14264,7 @@ class Room extends Emitter {
   unmute() {
     logger.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -14272,7 +14284,7 @@ class Room extends Emitter {
   hold() {
     logger.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -14282,7 +14294,7 @@ class Room extends Emitter {
   async resume() {
     logger.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -14300,9 +14312,9 @@ class Room extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -14310,23 +14322,23 @@ class Room extends Emitter {
   sendDTMF(tone        ) {
     logger.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -14340,27 +14352,27 @@ class Room extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -14370,15 +14382,15 @@ class Room extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -14434,7 +14446,7 @@ class Room extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -14453,20 +14465,20 @@ class Room extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -14539,7 +14551,7 @@ class Room extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -14554,12 +14566,12 @@ class Room extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -14586,13 +14598,13 @@ class Room extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -14605,7 +14617,7 @@ class Room extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -14654,7 +14666,7 @@ class Room extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -14682,7 +14694,7 @@ class Room extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -14751,7 +14763,7 @@ class Room extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -14767,10 +14779,12 @@ class Room extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
+var Room$1 = Room;
+
 exports.SIGNAL_TYPE_PARTICIPANT_REQUEST = SIGNAL_TYPE_PARTICIPANT_REQUEST;
 exports.SIGNAL_TYPE_PARTICIPANT_UPDATE = SIGNAL_TYPE_PARTICIPANT_UPDATE;
-exports.default = Room;
+exports["default"] = Room$1;
diff --git a/node_modules/@wazo/sdk/lib/simple/room/SipRoom.js b/node_modules/@wazo/sdk/lib/simple/room/SipRoom.js
index 0adb187..97e72f6 100644
--- a/node_modules/@wazo/sdk/lib/simple/room/SipRoom.js
+++ b/node_modules/@wazo/sdk/lib/simple/room/SipRoom.js
@@ -512,7 +512,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2769,7 +2769,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3026,6 +3026,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3045,6 +3052,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3056,12 +3064,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3069,13 +3078,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3148,7 +3158,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3295,7 +3305,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3826,7 +3836,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3882,8 +3892,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3989,7 +3999,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4008,8 +4018,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5897,7 +5907,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$9.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -5995,7 +6005,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -6165,7 +6175,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -6364,7 +6374,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6374,7 +6384,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6388,14 +6398,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6413,7 +6423,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6423,7 +6433,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6437,7 +6447,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6475,7 +6485,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -9049,7 +9059,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -11057,8 +11067,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -11191,7 +11201,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$6.error('Mute via API, error', e);
       });
     }
@@ -11199,7 +11209,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$6.error('Unmute via API, error', e);
       });
     }
@@ -11367,7 +11377,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -11376,7 +11386,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -11385,7 +11395,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -11574,7 +11584,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$5.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -12465,19 +12475,19 @@ class Room$1 extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -12510,30 +12520,30 @@ class Room$1 extends Emitter {
     logger$2.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$2.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room$1(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -12574,27 +12584,27 @@ class Room$1 extends Emitter {
   static disconnect() {
     logger$2.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$2.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -12625,21 +12635,21 @@ class Room$1 extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$2.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -12653,7 +12663,7 @@ class Room$1 extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$2.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -12665,7 +12675,7 @@ class Room$1 extends Emitter {
   turnCameraOff() {
     logger$2.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -12675,7 +12685,7 @@ class Room$1 extends Emitter {
   turnCameraOn() {
     logger$2.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -12685,7 +12695,7 @@ class Room$1 extends Emitter {
   mute() {
     logger$2.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -12693,7 +12703,7 @@ class Room$1 extends Emitter {
   unmute() {
     logger$2.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -12713,7 +12723,7 @@ class Room$1 extends Emitter {
   hold() {
     logger$2.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -12723,7 +12733,7 @@ class Room$1 extends Emitter {
   async resume() {
     logger$2.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -12741,9 +12751,9 @@ class Room$1 extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -12751,23 +12761,23 @@ class Room$1 extends Emitter {
   sendDTMF(tone        ) {
     logger$2.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$2.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -12781,27 +12791,27 @@ class Room$1 extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -12811,15 +12821,15 @@ class Room$1 extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$2.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -12875,7 +12885,7 @@ class Room$1 extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -12894,20 +12904,20 @@ class Room$1 extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -12980,7 +12990,7 @@ class Room$1 extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -12995,12 +13005,12 @@ class Room$1 extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -13027,13 +13037,13 @@ class Room$1 extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -13046,7 +13056,7 @@ class Room$1 extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$2.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -13095,7 +13105,7 @@ class Room$1 extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -13123,7 +13133,7 @@ class Room$1 extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -13192,7 +13202,7 @@ class Room$1 extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -13208,7 +13218,7 @@ class Room$1 extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -13231,7 +13241,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -13312,7 +13322,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -14560,7 +14570,7 @@ const Wazo = {
   Phone: Phone$1,
   Websocket: Websocket$1,
   Room: Room$1,
-  SipRoom,
+  SipRoom: SipRoom$1,
   RemoteParticipant,
   LocalParticipant,
   Stream,
@@ -14630,6 +14640,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 //      
 
 const logger = IssueReporter$1.loggerFor('sdk-sip-room');
@@ -14640,11 +14652,11 @@ class SipRoom extends Room$1 {
     logger.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -14663,7 +14675,7 @@ class SipRoom extends Room$1 {
   mute() {
     logger.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -14671,25 +14683,25 @@ class SipRoom extends Room$1 {
   unmute() {
     logger.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -14728,7 +14740,7 @@ class SipRoom extends Room$1 {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -14764,9 +14776,11 @@ class SipRoom extends Room$1 {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
 
-module.exports = SipRoom;
+var SipRoom$1 = SipRoom;
+
+module.exports = SipRoom$1;
diff --git a/node_modules/@wazo/sdk/lib/simple/room/Stream.js b/node_modules/@wazo/sdk/lib/simple/room/Stream.js
index 5d6ea8c..ea5fd4f 100644
--- a/node_modules/@wazo/sdk/lib/simple/room/Stream.js
+++ b/node_modules/@wazo/sdk/lib/simple/room/Stream.js
@@ -1741,7 +1741,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2769,7 +2769,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3026,6 +3026,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3045,6 +3052,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3056,12 +3064,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3069,13 +3078,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3148,7 +3158,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3295,7 +3305,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3826,7 +3836,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3882,8 +3892,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3989,7 +3999,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4008,8 +4018,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5897,7 +5907,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$9.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -5995,7 +6005,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -6165,7 +6175,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -6364,7 +6374,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6374,7 +6384,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6388,14 +6398,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6413,7 +6423,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6423,7 +6433,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6437,7 +6447,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6475,7 +6485,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -9049,7 +9059,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -11057,8 +11067,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -11191,7 +11201,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$6.error('Mute via API, error', e);
       });
     }
@@ -11199,7 +11209,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$6.error('Unmute via API, error', e);
       });
     }
@@ -11367,7 +11377,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -11376,7 +11386,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -11385,7 +11395,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -11574,7 +11584,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$5.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -12465,19 +12475,19 @@ class Room$1 extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -12510,30 +12520,30 @@ class Room$1 extends Emitter {
     logger$2.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$2.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room$1(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -12574,27 +12584,27 @@ class Room$1 extends Emitter {
   static disconnect() {
     logger$2.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$2.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -12625,21 +12635,21 @@ class Room$1 extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$2.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -12653,7 +12663,7 @@ class Room$1 extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$2.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -12665,7 +12675,7 @@ class Room$1 extends Emitter {
   turnCameraOff() {
     logger$2.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -12675,7 +12685,7 @@ class Room$1 extends Emitter {
   turnCameraOn() {
     logger$2.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -12685,7 +12695,7 @@ class Room$1 extends Emitter {
   mute() {
     logger$2.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -12693,7 +12703,7 @@ class Room$1 extends Emitter {
   unmute() {
     logger$2.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -12713,7 +12723,7 @@ class Room$1 extends Emitter {
   hold() {
     logger$2.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -12723,7 +12733,7 @@ class Room$1 extends Emitter {
   async resume() {
     logger$2.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -12741,9 +12751,9 @@ class Room$1 extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -12751,23 +12761,23 @@ class Room$1 extends Emitter {
   sendDTMF(tone        ) {
     logger$2.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$2.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -12781,27 +12791,27 @@ class Room$1 extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -12811,15 +12821,15 @@ class Room$1 extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$2.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -12875,7 +12885,7 @@ class Room$1 extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -12894,20 +12904,20 @@ class Room$1 extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -12980,7 +12990,7 @@ class Room$1 extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -12995,12 +13005,12 @@ class Room$1 extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -13027,13 +13037,13 @@ class Room$1 extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -13046,7 +13056,7 @@ class Room$1 extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$2.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -13095,7 +13105,7 @@ class Room$1 extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -13123,7 +13133,7 @@ class Room$1 extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -13192,7 +13202,7 @@ class Room$1 extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -13208,7 +13218,7 @@ class Room$1 extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -13222,11 +13232,11 @@ class SipRoom extends Room$1 {
     logger$1.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -13245,7 +13255,7 @@ class SipRoom extends Room$1 {
   mute() {
     logger$1.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -13253,25 +13263,25 @@ class SipRoom extends Room$1 {
   unmute() {
     logger$1.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -13310,7 +13320,7 @@ class SipRoom extends Room$1 {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -13346,7 +13356,7 @@ class SipRoom extends Room$1 {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -13393,7 +13403,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -14644,7 +14654,7 @@ const Wazo = {
   SipRoom,
   RemoteParticipant,
   LocalParticipant,
-  Stream,
+  Stream: Stream$1,
   createLocalVideoStream,
   createLocalAudioStream,
   Configuration: Configuration$1,
@@ -14711,6 +14721,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 /* global document */
 
 class Stream {
@@ -14730,7 +14742,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -14769,4 +14781,6 @@ class Stream {
   }
 }
 
-module.exports = Stream;
+var Stream$1 = Stream;
+
+module.exports = Stream$1;
diff --git a/node_modules/@wazo/sdk/lib/simple/room/__tests__/Participant.test.js b/node_modules/@wazo/sdk/lib/simple/room/__tests__/Participant.test.js
index 06187c7..f448551 100644
--- a/node_modules/@wazo/sdk/lib/simple/room/__tests__/Participant.test.js
+++ b/node_modules/@wazo/sdk/lib/simple/room/__tests__/Participant.test.js
@@ -247,7 +247,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2769,7 +2769,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3026,6 +3026,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3045,6 +3052,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3056,12 +3064,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3069,13 +3078,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3148,7 +3158,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3295,7 +3305,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3826,7 +3836,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3882,8 +3892,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3989,7 +3999,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4008,8 +4018,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5897,7 +5907,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$9.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -5995,7 +6005,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -6165,7 +6175,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -6364,7 +6374,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6374,7 +6384,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6388,14 +6398,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6413,7 +6423,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6423,7 +6433,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6437,7 +6447,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6475,7 +6485,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -9049,7 +9059,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -11057,8 +11067,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -11191,7 +11201,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$6.error('Mute via API, error', e);
       });
     }
@@ -11199,7 +11209,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$6.error('Unmute via API, error', e);
       });
     }
@@ -11367,7 +11377,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -11376,7 +11386,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -11385,7 +11395,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -11574,7 +11584,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$5.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -12465,19 +12475,19 @@ class Room$1 extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -12510,30 +12520,30 @@ class Room$1 extends Emitter {
     logger$2.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$2.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room$1(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -12574,27 +12584,27 @@ class Room$1 extends Emitter {
   static disconnect() {
     logger$2.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$2.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -12625,21 +12635,21 @@ class Room$1 extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$2.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -12653,7 +12663,7 @@ class Room$1 extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$2.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -12665,7 +12675,7 @@ class Room$1 extends Emitter {
   turnCameraOff() {
     logger$2.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -12675,7 +12685,7 @@ class Room$1 extends Emitter {
   turnCameraOn() {
     logger$2.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -12685,7 +12695,7 @@ class Room$1 extends Emitter {
   mute() {
     logger$2.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -12693,7 +12703,7 @@ class Room$1 extends Emitter {
   unmute() {
     logger$2.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -12713,7 +12723,7 @@ class Room$1 extends Emitter {
   hold() {
     logger$2.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -12723,7 +12733,7 @@ class Room$1 extends Emitter {
   async resume() {
     logger$2.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -12741,9 +12751,9 @@ class Room$1 extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -12751,23 +12761,23 @@ class Room$1 extends Emitter {
   sendDTMF(tone        ) {
     logger$2.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$2.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -12781,27 +12791,27 @@ class Room$1 extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -12811,15 +12821,15 @@ class Room$1 extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$2.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -12875,7 +12885,7 @@ class Room$1 extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -12894,20 +12904,20 @@ class Room$1 extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -12980,7 +12990,7 @@ class Room$1 extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -12995,12 +13005,12 @@ class Room$1 extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -13027,13 +13037,13 @@ class Room$1 extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -13046,7 +13056,7 @@ class Room$1 extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$2.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -13095,7 +13105,7 @@ class Room$1 extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -13123,7 +13133,7 @@ class Room$1 extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -13192,7 +13202,7 @@ class Room$1 extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -13208,7 +13218,7 @@ class Room$1 extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -13222,11 +13232,11 @@ class SipRoom extends Room$1 {
     logger$1.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -13245,7 +13255,7 @@ class SipRoom extends Room$1 {
   mute() {
     logger$1.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -13253,25 +13263,25 @@ class SipRoom extends Room$1 {
   unmute() {
     logger$1.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -13310,7 +13320,7 @@ class SipRoom extends Room$1 {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -13346,7 +13356,7 @@ class SipRoom extends Room$1 {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -13370,7 +13380,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -13451,7 +13461,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -14769,6 +14779,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 // Using directly Wazo to avoid issues with require cycle
 
 jest.mock('../../../service/getApiClient');
@@ -14777,7 +14789,7 @@ describe('Participant', () => {
   describe('ban', () => {
     it('should throw an error when there is no meeting', async () => {
       const room = new Room$1();
-      const participant = new Wazo.RemoteParticipant(room, {
+      const participant = new Wazo$1.RemoteParticipant(room, {
         call_id: 'id',
         caller_id_name: 'Alice',
         caller_id_number: 'number',
@@ -14802,7 +14814,7 @@ describe('Participant', () => {
         },
       }));
 
-      const participant = new Wazo.RemoteParticipant(room, {
+      const participant = new Wazo$1.RemoteParticipant(room, {
         call_id: callId,
         caller_id_name: 'Alice',
         caller_id_number: number,
@@ -14831,7 +14843,7 @@ describe('Participant', () => {
         },
       }));
 
-      const participant = new Wazo.RemoteParticipant(room, {
+      const participant = new Wazo$1.RemoteParticipant(room, {
         call_id: callId,
         caller_id_name: 'Alice',
         caller_id_number: number,
diff --git a/node_modules/@wazo/sdk/lib/simple/room/__tests__/RemoteParticipant.test.js b/node_modules/@wazo/sdk/lib/simple/room/__tests__/RemoteParticipant.test.js
index 2ed7a89..9bf4361 100644
--- a/node_modules/@wazo/sdk/lib/simple/room/__tests__/RemoteParticipant.test.js
+++ b/node_modules/@wazo/sdk/lib/simple/room/__tests__/RemoteParticipant.test.js
@@ -1741,7 +1741,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2769,7 +2769,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3026,6 +3026,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3045,6 +3052,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3056,12 +3064,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3069,13 +3078,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3148,7 +3158,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3295,7 +3305,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3826,7 +3836,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3882,8 +3892,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3989,7 +3999,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4008,8 +4018,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5897,7 +5907,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$9.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -5995,7 +6005,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -6165,7 +6175,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -6364,7 +6374,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6374,7 +6384,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6388,14 +6398,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6413,7 +6423,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6423,7 +6433,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6437,7 +6447,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6475,7 +6485,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -9049,7 +9059,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -11057,8 +11067,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -11191,7 +11201,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$6.error('Mute via API, error', e);
       });
     }
@@ -11199,7 +11209,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$6.error('Unmute via API, error', e);
       });
     }
@@ -11367,7 +11377,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -11376,7 +11386,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -11385,7 +11395,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -11574,7 +11584,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$5.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -12465,19 +12475,19 @@ class Room$1 extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -12510,30 +12520,30 @@ class Room$1 extends Emitter {
     logger$2.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$2.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room$1(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -12574,27 +12584,27 @@ class Room$1 extends Emitter {
   static disconnect() {
     logger$2.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$2.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -12625,21 +12635,21 @@ class Room$1 extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$2.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -12653,7 +12663,7 @@ class Room$1 extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$2.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -12665,7 +12675,7 @@ class Room$1 extends Emitter {
   turnCameraOff() {
     logger$2.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -12675,7 +12685,7 @@ class Room$1 extends Emitter {
   turnCameraOn() {
     logger$2.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -12685,7 +12695,7 @@ class Room$1 extends Emitter {
   mute() {
     logger$2.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -12693,7 +12703,7 @@ class Room$1 extends Emitter {
   unmute() {
     logger$2.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -12713,7 +12723,7 @@ class Room$1 extends Emitter {
   hold() {
     logger$2.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -12723,7 +12733,7 @@ class Room$1 extends Emitter {
   async resume() {
     logger$2.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -12741,9 +12751,9 @@ class Room$1 extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -12751,23 +12761,23 @@ class Room$1 extends Emitter {
   sendDTMF(tone        ) {
     logger$2.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$2.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -12781,27 +12791,27 @@ class Room$1 extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -12811,15 +12821,15 @@ class Room$1 extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$2.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -12875,7 +12885,7 @@ class Room$1 extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -12894,20 +12904,20 @@ class Room$1 extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -12980,7 +12990,7 @@ class Room$1 extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -12995,12 +13005,12 @@ class Room$1 extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -13027,13 +13037,13 @@ class Room$1 extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -13046,7 +13056,7 @@ class Room$1 extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$2.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -13095,7 +13105,7 @@ class Room$1 extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -13123,7 +13133,7 @@ class Room$1 extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -13192,7 +13202,7 @@ class Room$1 extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -13208,7 +13218,7 @@ class Room$1 extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -13222,11 +13232,11 @@ class SipRoom extends Room$1 {
     logger$1.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -13245,7 +13255,7 @@ class SipRoom extends Room$1 {
   mute() {
     logger$1.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -13253,25 +13263,25 @@ class SipRoom extends Room$1 {
   unmute() {
     logger$1.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -13310,7 +13320,7 @@ class SipRoom extends Room$1 {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -13346,7 +13356,7 @@ class SipRoom extends Room$1 {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -13370,7 +13380,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -13451,7 +13461,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
@@ -14769,12 +14779,14 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 // Using directly Wazo to avoid issues with require cycle
 
 describe('RemoteParticipant', () => {
   it('should fall back on number when name is <unknown>', () => {
     const number = '1234';
-    const participant = new Wazo.RemoteParticipant(null, { caller_id_name: '<unknown>', caller_id_number: number });
+    const participant = new Wazo$1.RemoteParticipant(null, { caller_id_name: '<unknown>', caller_id_number: number });
     expect(participant.name).toEqual(number);
   });
 });
diff --git a/node_modules/@wazo/sdk/lib/simple/utils.js b/node_modules/@wazo/sdk/lib/simple/utils.js
index 49a9b46..a3fee20 100644
--- a/node_modules/@wazo/sdk/lib/simple/utils.js
+++ b/node_modules/@wazo/sdk/lib/simple/utils.js
@@ -1743,7 +1743,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -2771,7 +2771,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3028,6 +3028,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3047,6 +3054,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3058,12 +3066,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3071,13 +3080,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3150,7 +3160,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3297,7 +3307,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -3828,7 +3838,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3884,8 +3894,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -3991,7 +4001,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4010,8 +4020,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -5899,7 +5909,7 @@ class Auth {
     setOnRefreshToken((token        , session         ) => {
       logger$9.info('on refresh token done', { token });
       setApiToken(token);
-      Wazo.Websocket.updateToken(token);
+      Wazo$1.Websocket.updateToken(token);
 
       if (this.onRefreshTokenCallback) {
         this.onRefreshTokenCallback(token, session);
@@ -5997,7 +6007,7 @@ class Auth {
 
   async logout(deleteRefreshToken          = true) {
     try {
-      Wazo.Websocket.close(true);
+      Wazo$1.Websocket.close(true);
 
       if (this.clientId && deleteRefreshToken) {
         await getApiClient().auth.deleteRefreshToken(this.clientId);
@@ -6167,7 +6177,7 @@ class Auth {
 
     this.authenticated = true;
 
-    Wazo.Websocket.open(this.host, session);
+    Wazo$1.Websocket.open(this.host, session);
 
     this.session = session;
 
@@ -6366,7 +6376,7 @@ const parseCandidate$1 = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -6376,7 +6386,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -6390,14 +6400,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -6415,7 +6425,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -6425,7 +6435,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -6439,7 +6449,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -6477,7 +6487,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -9051,7 +9061,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -11059,8 +11069,8 @@ class Phone extends Emitter {
       return;
     }
 
-    const server = Wazo.Auth.getHost();
-    const session = Wazo.Auth.getSession();
+    const server = Wazo$1.Auth.getHost();
+    const session = Wazo$1.Auth.getSession();
     if (!server || !session) {
       throw new Error('Please connect to the server using `Wazo.Auth.logIn` or `Wazo.Auth.authenticate` '
         + 'before using Room.connect().');
@@ -11193,7 +11203,7 @@ class Phone extends Emitter {
 
   muteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.mute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.mute(callSession.callId).catch(e => {
         logger$6.error('Mute via API, error', e);
       });
     }
@@ -11201,7 +11211,7 @@ class Phone extends Emitter {
 
   unmuteViaAPI(callSession             ) {
     if (callSession && callSession.callId) {
-      Wazo.getApiClient().calld.unmute(callSession.callId).catch(e => {
+      Wazo$1.getApiClient().calld.unmute(callSession.callId).catch(e => {
         logger$6.error('Unmute via API, error', e);
       });
     }
@@ -11369,7 +11379,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryWebRtcLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primaryWebRtcLine() : null;
   }
 
@@ -11378,7 +11388,7 @@ class Phone extends Emitter {
   }
 
   getPrimaryLine() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     return session ? session.primarySipLine() : null;
   }
 
@@ -11387,7 +11397,7 @@ class Phone extends Emitter {
   }
 
   getSipLines() {
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     if (!session) {
       return [];
     }
@@ -11576,7 +11586,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger$5.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -12467,19 +12477,19 @@ class Room$1 extends Emitter {
     this.extra = extra;
 
     // Sugar syntax for `room.EVENT_NAME`
-    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
-    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
-    this.MEETING_USER_PARTICIPANT_JOINED = Wazo.Websocket.MEETING_USER_PARTICIPANT_JOINED;
-    this.MEETING_USER_PARTICIPANT_LEFT = Wazo.Websocket.MEETING_USER_PARTICIPANT_LEFT;
-    this.ON_SHARE_SCREEN_ENDED = Wazo.Phone.ON_SHARE_SCREEN_ENDED;
-    this.ON_MESSAGE = Wazo.Phone.ON_MESSAGE;
-    this.ON_CHAT = Wazo.Phone.ON_CHAT;
-    this.ON_SIGNAL = Wazo.Phone.ON_SIGNAL;
-
-    this.ON_AUDIO_STREAM = Wazo.Phone.ON_AUDIO_STREAM;
-    this.ON_VIDEO_STREAM = Wazo.Phone.ON_VIDEO_STREAM;
-    this.ON_REMOVE_STREAM = Wazo.Phone.ON_REMOVE_STREAM;
-    this.ON_VIDEO_INPUT_CHANGE = Wazo.Phone.ON_VIDEO_INPUT_CHANGE;
+    this.CONFERENCE_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_JOINED;
+    this.CONFERENCE_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.CONFERENCE_USER_PARTICIPANT_LEFT;
+    this.MEETING_USER_PARTICIPANT_JOINED = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_JOINED;
+    this.MEETING_USER_PARTICIPANT_LEFT = Wazo$1.Websocket.MEETING_USER_PARTICIPANT_LEFT;
+    this.ON_SHARE_SCREEN_ENDED = Wazo$1.Phone.ON_SHARE_SCREEN_ENDED;
+    this.ON_MESSAGE = Wazo$1.Phone.ON_MESSAGE;
+    this.ON_CHAT = Wazo$1.Phone.ON_CHAT;
+    this.ON_SIGNAL = Wazo$1.Phone.ON_SIGNAL;
+
+    this.ON_AUDIO_STREAM = Wazo$1.Phone.ON_AUDIO_STREAM;
+    this.ON_VIDEO_STREAM = Wazo$1.Phone.ON_VIDEO_STREAM;
+    this.ON_REMOVE_STREAM = Wazo$1.Phone.ON_REMOVE_STREAM;
+    this.ON_VIDEO_INPUT_CHANGE = Wazo$1.Phone.ON_VIDEO_INPUT_CHANGE;
     this.ON_DISCONNECTED = 'room/ON_DISCONNECTED';
     this.ON_JOINED = 'room/ON_JOINED';
 
@@ -12512,30 +12522,30 @@ class Room$1 extends Emitter {
     logger$2.info('connecting to room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
       if (withCamera) {
-        Wazo.Phone.checkSfu();
+        Wazo$1.Phone.checkSfu();
       }
 
       // Call_created is triggered before call_accepted, so we have to listen for it here.
-      Wazo.Websocket.once(Wazo.Websocket.CALL_CREATED, ({ data }) => {
+      Wazo$1.Websocket.once(Wazo$1.Websocket.CALL_CREATED, ({ data }) => {
         logger$2.info('room call received via WS', { callId: data.call_id });
         if (room) {
           room.setCallId(data.call_id);
         }
       });
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new Room$1(callSession, extension, null, null, extra);
 
       // Wait for the call to be accepted
       await new Promise((resolve, reject) => {
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_ACCEPTED, resolve);
-        Wazo.Phone.once(Wazo.Phone.ON_CALL_FAILED, reject);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_ACCEPTED, resolve);
+        Wazo$1.Phone.once(Wazo$1.Phone.ON_CALL_FAILED, reject);
       });
     }
 
@@ -12576,27 +12586,27 @@ class Room$1 extends Emitter {
   static disconnect() {
     logger$2.info('static disconnection to room');
 
-    Wazo.Phone.disconnect();
+    Wazo$1.Phone.disconnect();
   }
 
   async disconnect() {
     logger$2.info('disconnection to room called');
 
-    await Wazo.Phone.hangup(this.callSession);
+    await Wazo$1.Phone.hangup(this.callSession);
     this.callSession = null;
     this.eventEmitter.emit(this.ON_DISCONNECTED, this);
     this.connected = false;
     this.unbind();
 
-    Wazo.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.off(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
-    Wazo.Phone.phone.off(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Phone.off(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.off(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.off(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.off(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.phone.off(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.off(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
   }
 
   setSourceId(sourceId        ) {
@@ -12627,21 +12637,21 @@ class Room$1 extends Emitter {
 
   // @TODO: change sipSession to callSession
   sendMessage(body        , sipSession      = null) {
-    return Wazo.Phone.sendMessage(body, sipSession);
+    return Wazo$1.Phone.sendMessage(body, sipSession);
   }
 
   sendChat(content        ) {
-    return Wazo.Phone.sendChat(content);
+    return Wazo$1.Phone.sendChat(content);
   }
 
   sendSignal(content     ) {
-    return Wazo.Phone.sendSignal(content);
+    return Wazo$1.Phone.sendSignal(content);
   }
 
   async startScreenSharing(constraints        ) {
     logger$2.info('start room screen sharing', { constraints });
 
-    const screensharingStream = await Wazo.Phone.startScreenSharing(constraints, this.callSession);
+    const screensharingStream = await Wazo$1.Phone.startScreenSharing(constraints, this.callSession);
     if (!screensharingStream) {
       console.warn('screensharing stream is null (likely due to user cancellation)');
       return null;
@@ -12655,7 +12665,7 @@ class Room$1 extends Emitter {
   async stopScreenSharing(restoreLocalStream          = true) {
     logger$2.info('stop room screen sharing');
 
-    await Wazo.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
+    await Wazo$1.Phone.stopScreenSharing(this.callSession, restoreLocalStream);
 
     if (this.localParticipant) {
       this._updateLocalParticipantStream();
@@ -12667,7 +12677,7 @@ class Room$1 extends Emitter {
   turnCameraOff() {
     logger$2.info('turn room camera off');
 
-    Wazo.Phone.turnCameraOff(this.callSession);
+    Wazo$1.Phone.turnCameraOff(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoMuted();
@@ -12677,7 +12687,7 @@ class Room$1 extends Emitter {
   turnCameraOn() {
     logger$2.info('turn room camera on');
 
-    Wazo.Phone.turnCameraOn(this.callSession);
+    Wazo$1.Phone.turnCameraOn(this.callSession);
 
     if (this.localParticipant) {
       this.localParticipant.onVideoUnMuted();
@@ -12687,7 +12697,7 @@ class Room$1 extends Emitter {
   mute() {
     logger$2.info('mute room');
 
-    Wazo.Phone.mute(this.callSession);
+    Wazo$1.Phone.mute(this.callSession);
 
     this.sendMuteStatus();
   }
@@ -12695,7 +12705,7 @@ class Room$1 extends Emitter {
   unmute() {
     logger$2.info('unmute room');
 
-    Wazo.Phone.unmute(this.callSession);
+    Wazo$1.Phone.unmute(this.callSession);
 
     this.sendUnMuteStatus();
   }
@@ -12715,7 +12725,7 @@ class Room$1 extends Emitter {
   hold() {
     logger$2.info('hold room');
 
-    Wazo.Phone.hold(this.callSession, true);
+    Wazo$1.Phone.hold(this.callSession, true);
 
     if (this.localParticipant) {
       this.localParticipant.onHold();
@@ -12725,7 +12735,7 @@ class Room$1 extends Emitter {
   async resume() {
     logger$2.info('resume room');
 
-    const newStream = await Wazo.Phone.resume(this.callSession, true);
+    const newStream = await Wazo$1.Phone.resume(this.callSession, true);
 
     if (this.localParticipant) {
       // Update local participant stream (useful when resuming a shreenshared conference)
@@ -12743,9 +12753,9 @@ class Room$1 extends Emitter {
   }
 
   _updateLocalParticipantStream() {
-    const localStream = Wazo.Phone.getLocalStream(this.callSession);
+    const localStream = Wazo$1.Phone.getLocalStream(this.callSession);
     if (this.localParticipant && localStream) {
-      const localWazoStream = new Wazo.Stream(localStream);
+      const localWazoStream = new Wazo$1.Stream(localStream);
       this.localParticipant.resetStreams([localWazoStream]);
     }
   }
@@ -12753,23 +12763,23 @@ class Room$1 extends Emitter {
   sendDTMF(tone        ) {
     logger$2.info('send room DTMF', { tone });
 
-    Wazo.Phone.sendDTMF(tone, this.callSession);
+    Wazo$1.Phone.sendDTMF(tone, this.callSession);
   }
 
   async sendReinvite(newConstraints         = null) {
     logger$2.info('send room reinvite', { callId: this.callSession ? this.callSession.getId() : null, newConstraints });
     const wasScreensharing = this.localParticipant && this.localParticipant.screensharing;
 
-    Wazo.Phone.on(Wazo.Phone.ON_SHARE_SCREEN_STARTED, () => {
-      if (Wazo.Phone.phone && Wazo.Phone.phone.currentScreenShare) {
+    Wazo$1.Phone.on(Wazo$1.Phone.ON_SHARE_SCREEN_STARTED, () => {
+      if (Wazo$1.Phone.phone && Wazo$1.Phone.phone.currentScreenShare) {
         this._onScreenSharing();
       }
     });
 
-    const response = await Wazo.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
+    const response = await Wazo$1.Phone.phone.sendReinvite(this.callSession, newConstraints, true);
 
     if (this.localParticipant && newConstraints && newConstraints.video) {
-      const localVideoStream = Wazo.Phone.phone.getLocalVideoStream(this.callSession);
+      const localVideoStream = Wazo$1.Phone.phone.getLocalVideoStream(this.callSession);
       if (localVideoStream) {
         // $FlowFixMe
         this._associateStreamTo(localVideoStream, this.localParticipant);
@@ -12783,27 +12793,27 @@ class Room$1 extends Emitter {
   }
 
   hasALocalVideoTrack() {
-    return Wazo.Phone.hasALocalVideoTrack(this.callSession);
+    return Wazo$1.Phone.hasALocalVideoTrack(this.callSession);
   }
 
   getLocalStream() {
-    return Wazo.Phone.getLocalStream(this.callSession);
+    return Wazo$1.Phone.getLocalStream(this.callSession);
   }
 
   getRemoteStream() {
-    return Wazo.Phone.getRemoteStream(this.callSession);
+    return Wazo$1.Phone.getRemoteStream(this.callSession);
   }
 
   getRemoteVideoStream() {
-    return Wazo.Phone.getRemoteVideoStream(this.callSession);
+    return Wazo$1.Phone.getRemoteVideoStream(this.callSession);
   }
 
   _bindEvents() {
-    if (!Wazo.Phone.phone || !Wazo.Phone.phone.currentSipSession) {
+    if (!Wazo$1.Phone.phone || !Wazo$1.Phone.phone.currentSipSession) {
       return;
     }
     // Retrieve mapping
-    Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
+    Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.on('setDescription', ({ type, sdp: rawSdp }) => {
       if (type !== 'offer') {
         return;
       }
@@ -12813,15 +12823,15 @@ class Room$1 extends Emitter {
 
     // Listen to REINVITE to ba able to map msid after upgrading to video in a  audio only conference
     // This allow to map msid with the non parsed (eg without the `stripVideo` modifier) SDP
-    Wazo.Phone.phone.on(Wazo.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
+    Wazo$1.Phone.phone.on(Wazo$1.Phone.phone.client.ON_REINVITE, this._boundOnReinvite);
 
     this.on(this.ON_AUDIO_STREAM, stream => {
       logger$2.info('on room audio stream');
 
       this.audioStream = stream;
       if (!this.roomAudioElement) {
-        const sessionId = Wazo.Phone.phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
-        this.roomAudioElement = Wazo.Phone.phone.createAudioElementFor(sessionId);
+        const sessionId = Wazo$1.Phone.phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
+        this.roomAudioElement = Wazo$1.Phone.phone.createAudioElementFor(sessionId);
         this.roomAudioElement.srcObject = stream;
       } else {
         this.roomAudioElement.srcObject = stream;
@@ -12877,7 +12887,7 @@ class Room$1 extends Emitter {
   }
 
   _mapMsid(rawSdp        ) {
-    const sdp = sdpParser__default['default'].parse(rawSdp);
+    const sdp = sdpParser__default["default"].parse(rawSdp);
     const labelMsidArray = sdp.media.filter(media => !!media.label).map(({ label, msid }) => ({
       label: String(label),
       streamId: msid.split(' ')[0],
@@ -12896,20 +12906,20 @@ class Room$1 extends Emitter {
   }
 
   _transferEvents() {
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.CONFERENCE_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
-    Wazo.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_JOINED, this._boundOnParticipantJoined);
+    Wazo$1.Websocket.on(this.MEETING_USER_PARTICIPANT_LEFT, this._boundOnParticipantLeft);
 
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         )          {
@@ -12982,7 +12992,7 @@ class Room$1 extends Emitter {
         break;
       }
 
-      case Wazo.Phone.ON_MESSAGE_TRACK_UPDATED: {
+      case Wazo$1.Phone.ON_MESSAGE_TRACK_UPDATED: {
         const { callId, update } = content;
         const participantIdx = this.participants.findIndex(p => p.callId === callId);
         if (participantIdx !== -1) {
@@ -12997,12 +13007,12 @@ class Room$1 extends Emitter {
       }
     }
 
-    this.eventEmitter.emit(Wazo.Phone.ON_SIGNAL, content);
+    this.eventEmitter.emit(Wazo$1.Phone.ON_SIGNAL, content);
   }
 
   async _onParticipantJoined(payload        ) {
     const participant = payload.data;
-    const session = Wazo.Auth.getSession();
+    const session = Wazo$1.Auth.getSession();
     let participants = [];
 
     // When we join the room, we can call `getConferenceParticipantsAsUser`, not before.
@@ -13029,13 +13039,13 @@ class Room$1 extends Emitter {
           const isMe = item.call_id === this.callId;
 
           return isMe && item.call_id
-            ? new Wazo.LocalParticipant(this, item, this.extra)
-            : new Wazo.RemoteParticipant(this, item);
+            ? new Wazo$1.LocalParticipant(this, item, this.extra)
+            : new Wazo$1.RemoteParticipant(this, item);
         });
 
         this.participants = participants;
 
-        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo.LocalParticipant);
+        const localParticipant = participants.find(someParticipant => someParticipant instanceof Wazo$1.LocalParticipant);
         if (!this.localParticipant && localParticipant) {
           this._onLocalParticipantJoined(localParticipant);
         }
@@ -13048,7 +13058,7 @@ class Room$1 extends Emitter {
     }
 
     const remoteParticipant                     = !this.participants.some(p => p.callId === participant.call_id)
-      ? new Wazo.RemoteParticipant(this, participant)
+      ? new Wazo$1.RemoteParticipant(this, participant)
       : null;
 
     logger$2.info('other room user joined', { callId: participant.call_id, remoteParticipant: !!remoteParticipant });
@@ -13097,7 +13107,7 @@ class Room$1 extends Emitter {
       return;
     }
 
-    const videoStream = new Wazo.Stream(stream, localParticipant);
+    const videoStream = new Wazo$1.Stream(stream, localParticipant);
 
     if (videoStream) {
       localParticipant.resetStreams([videoStream]);
@@ -13125,7 +13135,7 @@ class Room$1 extends Emitter {
     const newParticipant = oldParticipant;
 
     const { trackId, streamId } = this._callIdStreamIdMap[newParticipant.callId] || {};
-    const pc = Wazo.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
+    const pc = Wazo$1.Phone.phone.currentSipSession.sessionDescriptionHandler.peerConnection;
     // Can't use `getReceivers` here because on FF we make the mapping based on the streamId
     const stream = pc.getRemoteStreams().find(someStream =>
       someStream.id === streamId || someStream.getTracks().some(track => track.id === trackId));
@@ -13194,7 +13204,7 @@ class Room$1 extends Emitter {
   }
 
   _associateStreamTo(rawStream     , participant             ) {
-    const stream = new Wazo.Stream(rawStream, participant);
+    const stream = new Wazo$1.Stream(rawStream, participant);
     participant.streams.push(stream);
     participant.videoStreams.push(stream);
 
@@ -13210,7 +13220,7 @@ class Room$1 extends Emitter {
   }
 
   _getLocalVideoStream() {
-    return Wazo.Phone.getLocalVideoStream(this.callSession);
+    return Wazo$1.Phone.getLocalVideoStream(this.callSession);
   }
 }
 
@@ -13224,11 +13234,11 @@ class SipRoom extends Room$1 {
     logger$1.info('connecting to sip room', { extension, audioOnly, room: !!room });
 
     if (!room) {
-      await Wazo.Phone.connect({ media: constraints });
+      await Wazo$1.Phone.connect({ media: constraints });
 
       const withCamera = constraints && !!constraints.video;
 
-      const callSession = await Wazo.Phone.call(extension, withCamera, null, audioOnly, true);
+      const callSession = await Wazo$1.Phone.call(extension, withCamera, null, audioOnly, true);
       // eslint-disable-next-line no-param-reassign
       room = new SipRoom(callSession, extension, null, null, extra);
     }
@@ -13247,7 +13257,7 @@ class SipRoom extends Room$1 {
   mute() {
     logger$1.info('mute sip room');
 
-    Wazo.Phone.mute(this.callSession, false);
+    Wazo$1.Phone.mute(this.callSession, false);
 
     this.sendMuteStatus();
   }
@@ -13255,25 +13265,25 @@ class SipRoom extends Room$1 {
   unmute() {
     logger$1.info('unmute sip room');
 
-    Wazo.Phone.unmute(this.callSession, false);
+    Wazo$1.Phone.unmute(this.callSession, false);
 
     this.sendUnMuteStatus();
   }
 
   getLocalGuestName() {
-    return Wazo.Phone.phone.client.userAgent.options.displayName;
+    return Wazo$1.Phone.phone.client.userAgent.options.displayName;
   }
 
   // Overridden to not listen to websocket messages
   _transferEvents() {
     // Phone events
-    Wazo.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
-    Wazo.Phone.on(this.ON_CHAT, this._boundOnChat);
-    Wazo.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
-    Wazo.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
+    Wazo$1.Phone.on(this.ON_MESSAGE, this._boundOnMessage);
+    Wazo$1.Phone.on(this.ON_CHAT, this._boundOnChat);
+    Wazo$1.Phone.on(this.ON_SIGNAL, this._boundOnSignal);
+    Wazo$1.Phone.on(this.ON_VIDEO_INPUT_CHANGE, this._boundSaveLocalVideoStream);
 
     [this.ON_AUDIO_STREAM, this.ON_VIDEO_STREAM, this.ON_REMOVE_STREAM].forEach(event =>
-      Wazo.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
+      Wazo$1.Phone.on(event, (...args) => this.eventEmitter.emit.apply(this.eventEmitter, [event, ...args])));
   }
 
   _onMessage(message         ) {
@@ -13312,7 +13322,7 @@ class SipRoom extends Room$1 {
   async _onParticipantJoined(channel        ) {
     const isLocal = channel.channelvars.WAZO_SIP_CALL_ID === this._getCurrentSipCallIs();
     const callId = channel.id;
-    const ParticipantClass = isLocal ? Wazo.LocalParticipant : Wazo.RemoteParticipant;
+    const ParticipantClass = isLocal ? Wazo$1.LocalParticipant : Wazo$1.RemoteParticipant;
     const name = channel.caller ? channel.caller.name : null;
     const extra = isLocal ? { guestName: this.getLocalGuestName() } : {};
     const participant = new ParticipantClass(this, {
@@ -13348,7 +13358,7 @@ class SipRoom extends Room$1 {
   }
 
   _getCurrentSipCallIs() {
-    return Wazo.Phone.getSipSessionId(Wazo.Phone.phone.currentSipSession);
+    return Wazo$1.Phone.getSipSessionId(Wazo$1.Phone.phone.currentSipSession);
   }
 
 }
@@ -13372,7 +13382,7 @@ class Stream {
 
   attach(rawElement                   ) {
     const element = rawElement || document.createElement('video');
-    const isLocal = this.participant instanceof Wazo.LocalParticipant;
+    const isLocal = this.participant instanceof Wazo$1.LocalParticipant;
     element.autoplay = true;
     element.srcObject = this.htmlStream;
     element.muted = isLocal;
@@ -14755,6 +14765,8 @@ if (global) {
   global.Wazo = Wazo;
 }
 
+var Wazo$1 = Wazo;
+
 /* global navigator */
 
 const createLocalStream = async (kind        , options         = {}) => {
@@ -14764,7 +14776,7 @@ const createLocalStream = async (kind        , options         = {}) => {
   // $FlowFixMe
   const mediaStream = await navigator.mediaDevices.getUserMedia(createOptions);
 
-  return new Wazo.Stream(mediaStream, new Wazo.LocalParticipant());
+  return new Wazo$1.Stream(mediaStream, new Wazo$1.LocalParticipant());
 };
 
 const createLocalVideoStream = async (options        ) => createLocalStream('video', options);
diff --git a/node_modules/@wazo/sdk/lib/utils/Emitter.js b/node_modules/@wazo/sdk/lib/utils/Emitter.js
index f9edd30..aff5401 100644
--- a/node_modules/@wazo/sdk/lib/utils/Emitter.js
+++ b/node_modules/@wazo/sdk/lib/utils/Emitter.js
@@ -12,7 +12,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
diff --git a/node_modules/@wazo/sdk/lib/utils/PhoneNumberUtil.js b/node_modules/@wazo/sdk/lib/utils/PhoneNumberUtil.js
index 27f4d64..3d3d5f3 100644
--- a/node_modules/@wazo/sdk/lib/utils/PhoneNumberUtil.js
+++ b/node_modules/@wazo/sdk/lib/utils/PhoneNumberUtil.js
@@ -10,8 +10,8 @@ var LibPhoneNumber__default = /*#__PURE__*/_interopDefaultLegacy(LibPhoneNumber)
 
 //      
 
-const PhoneNumberUtil = LibPhoneNumber__default['default'].PhoneNumberUtil.getInstance();
-const { PhoneNumberFormat, AsYouTypeFormatter } = LibPhoneNumber__default['default'];
+const PhoneNumberUtil = LibPhoneNumber__default["default"].PhoneNumberUtil.getInstance();
+const { PhoneNumberFormat, AsYouTypeFormatter } = LibPhoneNumber__default["default"];
 
 // eslint-disable-next-line
 const EXTRA_CHAR_REGEXP = /[^+*\d]/g;
diff --git a/node_modules/@wazo/sdk/lib/utils/__tests__/PhoneNumberUtil.test.js b/node_modules/@wazo/sdk/lib/utils/__tests__/PhoneNumberUtil.test.js
index 9bff04a..e161a1e 100644
--- a/node_modules/@wazo/sdk/lib/utils/__tests__/PhoneNumberUtil.test.js
+++ b/node_modules/@wazo/sdk/lib/utils/__tests__/PhoneNumberUtil.test.js
@@ -8,8 +8,8 @@ var LibPhoneNumber__default = /*#__PURE__*/_interopDefaultLegacy(LibPhoneNumber)
 
 //      
 
-const PhoneNumberUtil = LibPhoneNumber__default['default'].PhoneNumberUtil.getInstance();
-const { PhoneNumberFormat, AsYouTypeFormatter } = LibPhoneNumber__default['default'];
+const PhoneNumberUtil = LibPhoneNumber__default["default"].PhoneNumberUtil.getInstance();
+const { PhoneNumberFormat, AsYouTypeFormatter } = LibPhoneNumber__default["default"];
 
 // eslint-disable-next-line
 const EXTRA_CHAR_REGEXP = /[^+*\d]/g;
diff --git a/node_modules/@wazo/sdk/lib/utils/__tests__/api-requester.test.js b/node_modules/@wazo/sdk/lib/utils/__tests__/api-requester.test.js
index b61c794..1696a20 100644
--- a/node_modules/@wazo/sdk/lib/utils/__tests__/api-requester.test.js
+++ b/node_modules/@wazo/sdk/lib/utils/__tests__/api-requester.test.js
@@ -220,7 +220,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
diff --git a/node_modules/@wazo/sdk/lib/utils/__tests__/sdp.test.js b/node_modules/@wazo/sdk/lib/utils/__tests__/sdp.test.js
index 5df8846..f6879d4 100644
--- a/node_modules/@wazo/sdk/lib/utils/__tests__/sdp.test.js
+++ b/node_modules/@wazo/sdk/lib/utils/__tests__/sdp.test.js
@@ -13,7 +13,7 @@ const getCandidates = (rawSdp         )           => {
     return [];
   }
 
-  const sdp = sdpParser__default['default'].parse(rawSdp);
+  const sdp = sdpParser__default["default"].parse(rawSdp);
   if (!sdp || !sdp.media) {
     return [];
   }
@@ -25,7 +25,7 @@ const parseCandidate = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -45,24 +45,24 @@ const isSdpValid = (sdp         )          => {
 };
 
 const fixBundle = (sdp        )         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const bundleIndex = parsedSdp.groups.findIndex(group => group.type === 'BUNDLE');
   if (bundleIndex !== -1) {
     parsedSdp.groups[bundleIndex].mids = parsedSdp.media
       .map((media, index) => ('mid' in media ? media.mid : index)).join(' ');
   }
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 const toggleVideoDirection = (sdp        , direction         )         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   parsedSdp.media = parsedSdp.media.map(media => ({
     ...media,
     ...(media.type === 'video' ? { direction } : {}),
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 const hasAnActiveVideo = (sdp         )          => {
@@ -70,14 +70,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -95,7 +95,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -105,7 +105,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -119,7 +119,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* eslint-disable max-len */
@@ -252,7 +252,7 @@ describe('SDP utils', () => {
       const candidates = [parseCandidate(candidate)];
 
       const fixedSdp = fixSdp(badMobileSdp, candidates);
-      const parsed = sdpParser__default['default'].parse(fixedSdp);
+      const parsed = sdpParser__default["default"].parse(fixedSdp);
 
       expect(parsed.media[0].candidates.length).toBe(1);
       expect(parsed.media[0].port).toBe(57021);
@@ -264,7 +264,7 @@ describe('SDP utils', () => {
   describe('Fixing group bundle', () => {
     it('should set a bundle for each m section', async () => {
       const invalid = fixBundle(invalidBundle);
-      const parsed = sdpParser__default['default'].parse(invalid);
+      const parsed = sdpParser__default["default"].parse(invalid);
 
       expect(parsed.groups[0].mids).toBe('0 1');
     });
@@ -273,7 +273,7 @@ describe('SDP utils', () => {
   describe('Deactivate video', () => {
     it('should set inactive to each video sections', async () => {
       const sdp = toggleVideoDirection(videoReinvite, 'inactive');
-      const parsed = sdpParser__default['default'].parse(sdp);
+      const parsed = sdpParser__default["default"].parse(sdp);
 
       expect(parsed.media[1].direction).toBe('inactive');
       expect(parsed.media[2].direction).toBe('inactive');
@@ -296,7 +296,7 @@ m=video 54400 RTP/SAVPF 0 96
 a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
 a=candidate:3996450952 1 udp 41819903 14.72.21.2 65092 typ relay raddr 0.0.0.0 rport 0 generation 0 network-id 3 network-cost 10
 `;
-      const fixedAudioWithoutCandidate = sdpParser__default['default'].parse(addIcesInAllBundles(audioWithoutCandidate));
+      const fixedAudioWithoutCandidate = sdpParser__default["default"].parse(addIcesInAllBundles(audioWithoutCandidate));
 
       expect(fixedAudioWithoutCandidate.media[0].candidates[0].type).toBe('host');
       expect(fixedAudioWithoutCandidate.media[0].candidates[1].type).toBe('relay');
@@ -312,7 +312,7 @@ a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ srflx
 m=video 54400 RTP/SAVPF 0 96
 a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
 `;
-      const fixedAudioWithCandidate = sdpParser__default['default'].parse(addIcesInAllBundles(audioWithCandidate));
+      const fixedAudioWithCandidate = sdpParser__default["default"].parse(addIcesInAllBundles(audioWithCandidate));
 
       expect(fixedAudioWithCandidate.media[0].candidates[0].type).toBe('srflx');
       expect(fixedAudioWithCandidate.media[1].candidates[0].type).toBe('host');
diff --git a/node_modules/@wazo/sdk/lib/utils/api-requester.js b/node_modules/@wazo/sdk/lib/utils/api-requester.js
index edbabd6..3dc9b71 100644
--- a/node_modules/@wazo/sdk/lib/utils/api-requester.js
+++ b/node_modules/@wazo/sdk/lib/utils/api-requester.js
@@ -222,7 +222,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -701,5 +701,5 @@ class ApiRequester {
   }
 }
 
-exports.default = ApiRequester;
+exports["default"] = ApiRequester;
 exports.realFetch = realFetch;
diff --git a/node_modules/@wazo/sdk/lib/utils/logger.js b/node_modules/@wazo/sdk/lib/utils/logger.js
new file mode 100644
index 0000000..f38aa6d
--- /dev/null
+++ b/node_modules/@wazo/sdk/lib/utils/logger.js
@@ -0,0 +1,19 @@
+'use strict';
+
+/*       */
+
+class Logger {
+  static hasDebug() {
+    return typeof process !== 'undefined' && (+process.env.DEBUG === 1 || process.env.DEBUG === 'true');
+  }
+
+  static log(...msg     ) {
+    if (!Logger.hasDebug()) {
+      return;
+    }
+
+    console.info(...msg);
+  }
+}
+
+module.exports = Logger;
diff --git a/node_modules/@wazo/sdk/lib/utils/sdp.js b/node_modules/@wazo/sdk/lib/utils/sdp.js
index e753df5..2910449 100644
--- a/node_modules/@wazo/sdk/lib/utils/sdp.js
+++ b/node_modules/@wazo/sdk/lib/utils/sdp.js
@@ -15,7 +15,7 @@ const getCandidates = (rawSdp         )           => {
     return [];
   }
 
-  const sdp = sdpParser__default['default'].parse(rawSdp);
+  const sdp = sdpParser__default["default"].parse(rawSdp);
   if (!sdp || !sdp.media) {
     return [];
   }
@@ -27,7 +27,7 @@ const parseCandidate = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -47,28 +47,28 @@ const isSdpValid = (sdp         )          => {
 };
 
 const fixBundle = (sdp        )         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const bundleIndex = parsedSdp.groups.findIndex(group => group.type === 'BUNDLE');
   if (bundleIndex !== -1) {
     parsedSdp.groups[bundleIndex].mids = parsedSdp.media
       .map((media, index) => ('mid' in media ? media.mid : index)).join(' ');
   }
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 const toggleVideoDirection = (sdp        , direction         )         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   parsedSdp.media = parsedSdp.media.map(media => ({
     ...media,
     ...(media.type === 'video' ? { direction } : {}),
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -96,14 +96,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -121,7 +121,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -131,7 +131,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -145,7 +145,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 exports.activateVideoModifier = activateVideoModifier;
diff --git a/node_modules/@wazo/sdk/lib/web-rtc-client.js b/node_modules/@wazo/sdk/lib/web-rtc-client.js
index b87131d..d6bcc69 100644
--- a/node_modules/@wazo/sdk/lib/web-rtc-client.js
+++ b/node_modules/@wazo/sdk/lib/web-rtc-client.js
@@ -511,7 +511,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -731,7 +731,7 @@ const parseCandidate = (candidate         )          => {
   if (!candidate) {
     return null;
   }
-  const result = sdpParser__default['default'].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
+  const result = sdpParser__default["default"].parse(candidate.indexOf('a=') === 0 ? candidate : `a=${candidate}`);
 
   return result.candidates ? result.candidates[0] : null;
 };
@@ -741,7 +741,7 @@ const getSrflxOrRelay = (candidates          )           =>
     .filter(candidate => candidate && (candidate.type === 'srflx' || candidate.type === 'relay'));
 
 const getVideoDirection = (sdp        )          => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const videoMedia = parsedSdp.media.find(media => media.type === 'video');
   if (!videoMedia) {
     return null;
@@ -755,14 +755,14 @@ const hasAnActiveVideo = (sdp         )          => {
     return false;
   }
 
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   return !!parsedSdp.media.find(media =>
     media.type === 'video' && media.port > 10 && (!media.direction || media.direction !== 'inactive'));
 };
 
 const fixSdp = (sdp        , candidates          , forcePort          = true)         => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
   const mainCandidate = getSrflxOrRelay(candidates)[0];
   const ip = mainCandidate ? mainCandidate.ip : null;
 
@@ -780,7 +780,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
     };
   });
 
-  let fixed = sdpParser__default['default'].write(parsedSdp);
+  let fixed = sdpParser__default["default"].write(parsedSdp);
 
   if (ip) {
     fixed = fixed.replace(/IN IP4 0.0.0.0/g, `IN IP4 ${ip}`);
@@ -790,7 +790,7 @@ const fixSdp = (sdp        , candidates          , forcePort          = true)
 };
 
 const addIcesInAllBundles = (sdp        ) => {
-  const parsedSdp = sdpParser__default['default'].parse(sdp);
+  const parsedSdp = sdpParser__default["default"].parse(sdp);
 
   const mediaWithCandidate = parsedSdp.media.find(media => !!media.candidates);
   if (!mediaWithCandidate) {
@@ -804,7 +804,7 @@ const addIcesInAllBundles = (sdp        ) => {
     candidates: media.candidates || candidates,
   }));
 
-  return sdpParser__default['default'].write(parsedSdp);
+  return sdpParser__default["default"].write(parsedSdp);
 };
 
 /* global RTCSessionDescriptionInit, navigator */
@@ -842,7 +842,7 @@ class WazoSessionDescriptionHandler extends sessionDescriptionHandler.SessionDes
   ) {
     super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);
 
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
     this.isWeb = isWeb;
     this.session = session;
   }
@@ -1265,7 +1265,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -3327,7 +3327,7 @@ class Meeting {
       uuid: plain.uuid,
       extension: plain.exten,
       persistent: plain.persistent,
-      creationTime: moment__default['default'](plain.creation_time).toDate(),
+      creationTime: moment__default["default"](plain.creation_time).toDate(),
       requireAuthorization: plain.require_authorization,
     });
   }
@@ -3584,6 +3584,13 @@ Relocation.MIN_ENGINE_VERSION_REQUIRED = '19.09';
                                    
                 
                   
+                     
+                      
+                    
+               
+                    
+                                 
+                                                 
   
 
                                        
@@ -3603,6 +3610,7 @@ class ChatMessage {
                     
                 
                     
+
   static parseMany(plain                         )                     {
     if (!plain || !plain.items) {
       return [];
@@ -3614,12 +3622,13 @@ class ChatMessage {
   static parse(plain                     )              {
     return new ChatMessage({
       uuid: plain.uuid,
-      date: moment__default['default'](plain.created_at).toDate(),
+      date: moment__default["default"](plain.created_at).toDate(),
       content: plain.content,
       alias: plain.alias,
       userUuid: plain.user_uuid,
       read: true,
       roomUuid: plain.room ? plain.room.uuid : null,
+      reactions: plain.reactions
     });
   }
 
@@ -3627,13 +3636,14 @@ class ChatMessage {
     return newFrom(message, ChatMessage);
   }
 
-  constructor({ uuid, date, content, userUuid, alias, roomUuid, read }         = {}) {
+  constructor({ uuid, date, content, userUuid, alias, roomUuid, read, reactions }         = {}) {
     this.uuid = uuid;
     this.date = date;
     this.content = content;
     this.userUuid = userUuid;
     this.alias = alias;
     this.roomUuid = roomUuid;
+    this.reactions = reactions;
 
     // @TODO: change after message read status available
     this.read = read;
@@ -3706,7 +3716,7 @@ class Voicemail {
   static parse(plain                 )            {
     return new Voicemail({
       id: plain.id,
-      date: moment__default['default'](plain.timestamp * 1000).toDate(),
+      date: moment__default["default"](plain.timestamp * 1000).toDate(),
       duration: plain.duration * 1000,
       caller: {
         name: plain.caller_id_name,
@@ -3853,7 +3863,7 @@ class Call {
       onHold: plain.on_hold,
       status: plain.status,
       lineId: plain.line_id,
-      startingTime: moment__default['default'](plain.creation_time).toDate(),
+      startingTime: moment__default["default"](plain.creation_time).toDate(),
       talkingToIds: Object.keys(plain.talking_to || {}),
       recording: plain.record_state === RECORD_STATE_ACTIVE,
     });
@@ -4020,8 +4030,8 @@ class Recording {
     return new Recording({
       deleted: plain.deleted,
       fileName: plain.filename,
-      end: plain.end_time ? moment__default['default'](plain.end_time).toDate() : null,
-      start: moment__default['default'](plain.start_time).toDate(),
+      end: plain.end_time ? moment__default["default"](plain.end_time).toDate() : null,
+      start: moment__default["default"](plain.start_time).toDate(),
       uuid: plain.uuid,
     });
   }
@@ -4127,7 +4137,7 @@ class CallLog {
 
   static parse(plain                 )          {
     return new CallLog({
-      answer: plain.answer ? moment__default['default'](plain.answer).toDate() : null,
+      answer: plain.answer ? moment__default["default"](plain.answer).toDate() : null,
       answered: plain.answered,
       callDirection: plain.call_direction,
       destination: {
@@ -4146,8 +4156,8 @@ class CallLog {
       },
       id: plain.id,
       duration: (plain.duration || 0) * 1000, // duration is in seconds
-      start: moment__default['default'](plain.start).toDate(),
-      end: plain.end ? moment__default['default'](plain.end).toDate() : null,
+      start: moment__default["default"](plain.start).toDate(),
+      end: plain.end ? moment__default["default"](plain.end).toDate() : null,
       recordings: Recording.parseMany(plain.recordings || []),
     });
   }
@@ -7638,7 +7648,7 @@ class WebRTCClient extends Emitter {
     }
     const sessionId = this.getSipSessionId(session);
 
-    getStats__default['default'](pc, (result        ) => {
+    getStats__default["default"](pc, (result        ) => {
       const { results, internal, nomore, ...stats } = result;
       this.statsIntervals[sessionId] = nomore;
 
@@ -7795,7 +7805,7 @@ class WebRTCClient extends Emitter {
 }
 
 exports.CanceledCallError = CanceledCallError;
-exports.default = WebRTCClient;
+exports["default"] = WebRTCClient;
 exports.events = events;
 exports.replaceLocalIpModifier = replaceLocalIpModifier;
 exports.transportEvents = transportEvents;
diff --git a/node_modules/@wazo/sdk/lib/websocket-client.js b/node_modules/@wazo/sdk/lib/websocket-client.js
index 466a856..5453a0a 100644
--- a/node_modules/@wazo/sdk/lib/websocket-client.js
+++ b/node_modules/@wazo/sdk/lib/websocket-client.js
@@ -19,7 +19,7 @@ class Emitter {
                              
 
   constructor() {
-    this.eventEmitter = new EventEmitter__default['default']();
+    this.eventEmitter = new EventEmitter__default["default"]();
   }
 
   on(event        , callback          ) {
@@ -219,7 +219,7 @@ class IssueReporter {
       delete extra.skipSendToRemote;
     }
 
-    const date = moment__default['default']().format('YYYY-MM-DD HH:mm:ss.SSS');
+    const date = moment__default["default"]().format('YYYY-MM-DD HH:mm:ss.SSS');
     const message = args.join(', ');
     let consoleMessage = message;
 
@@ -677,7 +677,7 @@ class WebSocketClient extends Emitter {
 
   connect() {
     logger.info('connect method started', { host: this.host, token: this.token });
-    this.socket = new ReconnectingWebSocket__default['default'](this._getUrl.bind(this), [], this.options);
+    this.socket = new ReconnectingWebSocket__default["default"](this._getUrl.bind(this), [], this.options);
     if (this.options.binaryType) {
       this.socket.binaryType = this.options.binaryType;
     }
@@ -1041,4 +1041,4 @@ exports.USER_STATUS_UPDATE = USER_STATUS_UPDATE;
 exports.USER_VOICEMAIL_MESSAGE_CREATED = USER_VOICEMAIL_MESSAGE_CREATED;
 exports.USER_VOICEMAIL_MESSAGE_DELETED = USER_VOICEMAIL_MESSAGE_DELETED;
 exports.USER_VOICEMAIL_MESSAGE_UPDATED = USER_VOICEMAIL_MESSAGE_UPDATED;
-exports.default = WebSocketClient;
+exports["default"] = WebSocketClient;
